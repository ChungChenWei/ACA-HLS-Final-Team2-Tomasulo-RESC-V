// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cpu_write_from_CDB (
        ap_ready,
        sym,
        value_r,
        rs_adders_status_busy_0,
        rs_adders_status_busy_0_ap_vld,
        rs_multipliers_status_busy_0,
        rs_multipliers_status_busy_0_ap_vld,
        rs_entry_r1_stat_0_i,
        rs_entry_r1_stat_0_o,
        rs_entry_r1_stat_0_o_ap_vld,
        rs_entry_3_1_0_i,
        rs_entry_3_1_0_o,
        rs_entry_3_1_0_o_ap_vld,
        rs_entry_r2_stat_0_i,
        rs_entry_r2_stat_0_o,
        rs_entry_r2_stat_0_o_ap_vld,
        rs_entry_4_1_0_i,
        rs_entry_4_1_0_o,
        rs_entry_4_1_0_o_ap_vld,
        rs_entry_r1_stat_1_i,
        rs_entry_r1_stat_1_o,
        rs_entry_r1_stat_1_o_ap_vld,
        rs_entry_3_1_1_i,
        rs_entry_3_1_1_o,
        rs_entry_3_1_1_o_ap_vld,
        rs_entry_r2_stat_1_i,
        rs_entry_r2_stat_1_o,
        rs_entry_r2_stat_1_o_ap_vld,
        rs_entry_4_1_1_i,
        rs_entry_4_1_1_o,
        rs_entry_4_1_1_o_ap_vld,
        rs_entry_r1_stat_2_i,
        rs_entry_r1_stat_2_o,
        rs_entry_r1_stat_2_o_ap_vld,
        rs_entry_3_1_2_i,
        rs_entry_3_1_2_o,
        rs_entry_3_1_2_o_ap_vld,
        rs_entry_r2_stat_2_i,
        rs_entry_r2_stat_2_o,
        rs_entry_r2_stat_2_o_ap_vld,
        rs_entry_4_1_2_i,
        rs_entry_4_1_2_o,
        rs_entry_4_1_2_o_ap_vld,
        rs_entry_r1_stat_3_i,
        rs_entry_r1_stat_3_o,
        rs_entry_r1_stat_3_o_ap_vld,
        rs_entry_3_1_3_i,
        rs_entry_3_1_3_o,
        rs_entry_3_1_3_o_ap_vld,
        rs_entry_r2_stat_3_i,
        rs_entry_r2_stat_3_o,
        rs_entry_r2_stat_3_o_ap_vld,
        rs_entry_4_1_3_i,
        rs_entry_4_1_3_o,
        rs_entry_4_1_3_o_ap_vld,
        rs_entry_r1_stat_4_i,
        rs_entry_r1_stat_4_o,
        rs_entry_r1_stat_4_o_ap_vld,
        rs_entry_3_1_4_i,
        rs_entry_3_1_4_o,
        rs_entry_3_1_4_o_ap_vld,
        rs_entry_r2_stat_4_i,
        rs_entry_r2_stat_4_o,
        rs_entry_r2_stat_4_o_ap_vld,
        rs_entry_4_1_4_i,
        rs_entry_4_1_4_o,
        rs_entry_4_1_4_o_ap_vld,
        rs_entry_r1_stat_5_i,
        rs_entry_r1_stat_5_o,
        rs_entry_r1_stat_5_o_ap_vld,
        rs_entry_3_1_5_i,
        rs_entry_3_1_5_o,
        rs_entry_3_1_5_o_ap_vld,
        rs_entry_r2_stat_5_i,
        rs_entry_r2_stat_5_o,
        rs_entry_r2_stat_5_o_ap_vld,
        rs_entry_4_1_5_i,
        rs_entry_4_1_5_o,
        rs_entry_4_1_5_o_ap_vld,
        rs_entry_valid_0,
        rs_entry_valid_0_ap_vld,
        rs_entry_valid_1,
        rs_entry_valid_1_ap_vld,
        rs_entry_valid_2,
        rs_entry_valid_2_ap_vld,
        rs_entry_valid_3,
        rs_entry_valid_3_ap_vld,
        rs_entry_valid_4,
        rs_entry_valid_4_ap_vld,
        rs_entry_valid_5,
        rs_entry_valid_5_ap_vld
);


output   ap_ready;
input  [31:0] sym;
input  [31:0] value_r;
output  [0:0] rs_adders_status_busy_0;
output   rs_adders_status_busy_0_ap_vld;
output  [0:0] rs_multipliers_status_busy_0;
output   rs_multipliers_status_busy_0_ap_vld;
input  [31:0] rs_entry_r1_stat_0_i;
output  [31:0] rs_entry_r1_stat_0_o;
output   rs_entry_r1_stat_0_o_ap_vld;
input  [31:0] rs_entry_3_1_0_i;
output  [31:0] rs_entry_3_1_0_o;
output   rs_entry_3_1_0_o_ap_vld;
input  [31:0] rs_entry_r2_stat_0_i;
output  [31:0] rs_entry_r2_stat_0_o;
output   rs_entry_r2_stat_0_o_ap_vld;
input  [31:0] rs_entry_4_1_0_i;
output  [31:0] rs_entry_4_1_0_o;
output   rs_entry_4_1_0_o_ap_vld;
input  [31:0] rs_entry_r1_stat_1_i;
output  [31:0] rs_entry_r1_stat_1_o;
output   rs_entry_r1_stat_1_o_ap_vld;
input  [31:0] rs_entry_3_1_1_i;
output  [31:0] rs_entry_3_1_1_o;
output   rs_entry_3_1_1_o_ap_vld;
input  [31:0] rs_entry_r2_stat_1_i;
output  [31:0] rs_entry_r2_stat_1_o;
output   rs_entry_r2_stat_1_o_ap_vld;
input  [31:0] rs_entry_4_1_1_i;
output  [31:0] rs_entry_4_1_1_o;
output   rs_entry_4_1_1_o_ap_vld;
input  [31:0] rs_entry_r1_stat_2_i;
output  [31:0] rs_entry_r1_stat_2_o;
output   rs_entry_r1_stat_2_o_ap_vld;
input  [31:0] rs_entry_3_1_2_i;
output  [31:0] rs_entry_3_1_2_o;
output   rs_entry_3_1_2_o_ap_vld;
input  [31:0] rs_entry_r2_stat_2_i;
output  [31:0] rs_entry_r2_stat_2_o;
output   rs_entry_r2_stat_2_o_ap_vld;
input  [31:0] rs_entry_4_1_2_i;
output  [31:0] rs_entry_4_1_2_o;
output   rs_entry_4_1_2_o_ap_vld;
input  [31:0] rs_entry_r1_stat_3_i;
output  [31:0] rs_entry_r1_stat_3_o;
output   rs_entry_r1_stat_3_o_ap_vld;
input  [31:0] rs_entry_3_1_3_i;
output  [31:0] rs_entry_3_1_3_o;
output   rs_entry_3_1_3_o_ap_vld;
input  [31:0] rs_entry_r2_stat_3_i;
output  [31:0] rs_entry_r2_stat_3_o;
output   rs_entry_r2_stat_3_o_ap_vld;
input  [31:0] rs_entry_4_1_3_i;
output  [31:0] rs_entry_4_1_3_o;
output   rs_entry_4_1_3_o_ap_vld;
input  [31:0] rs_entry_r1_stat_4_i;
output  [31:0] rs_entry_r1_stat_4_o;
output   rs_entry_r1_stat_4_o_ap_vld;
input  [31:0] rs_entry_3_1_4_i;
output  [31:0] rs_entry_3_1_4_o;
output   rs_entry_3_1_4_o_ap_vld;
input  [31:0] rs_entry_r2_stat_4_i;
output  [31:0] rs_entry_r2_stat_4_o;
output   rs_entry_r2_stat_4_o_ap_vld;
input  [31:0] rs_entry_4_1_4_i;
output  [31:0] rs_entry_4_1_4_o;
output   rs_entry_4_1_4_o_ap_vld;
input  [31:0] rs_entry_r1_stat_5_i;
output  [31:0] rs_entry_r1_stat_5_o;
output   rs_entry_r1_stat_5_o_ap_vld;
input  [31:0] rs_entry_3_1_5_i;
output  [31:0] rs_entry_3_1_5_o;
output   rs_entry_3_1_5_o_ap_vld;
input  [31:0] rs_entry_r2_stat_5_i;
output  [31:0] rs_entry_r2_stat_5_o;
output   rs_entry_r2_stat_5_o_ap_vld;
input  [31:0] rs_entry_4_1_5_i;
output  [31:0] rs_entry_4_1_5_o;
output   rs_entry_4_1_5_o_ap_vld;
output  [0:0] rs_entry_valid_0;
output   rs_entry_valid_0_ap_vld;
output  [0:0] rs_entry_valid_1;
output   rs_entry_valid_1_ap_vld;
output  [0:0] rs_entry_valid_2;
output   rs_entry_valid_2_ap_vld;
output  [0:0] rs_entry_valid_3;
output   rs_entry_valid_3_ap_vld;
output  [0:0] rs_entry_valid_4;
output   rs_entry_valid_4_ap_vld;
output  [0:0] rs_entry_valid_5;
output   rs_entry_valid_5_ap_vld;

reg rs_adders_status_busy_0_ap_vld;
reg rs_multipliers_status_busy_0_ap_vld;
reg[31:0] rs_entry_r1_stat_0_o;
reg rs_entry_r1_stat_0_o_ap_vld;
reg[31:0] rs_entry_3_1_0_o;
reg rs_entry_3_1_0_o_ap_vld;
reg[31:0] rs_entry_r2_stat_0_o;
reg rs_entry_r2_stat_0_o_ap_vld;
reg[31:0] rs_entry_4_1_0_o;
reg rs_entry_4_1_0_o_ap_vld;
reg[31:0] rs_entry_r1_stat_1_o;
reg rs_entry_r1_stat_1_o_ap_vld;
reg[31:0] rs_entry_3_1_1_o;
reg rs_entry_3_1_1_o_ap_vld;
reg[31:0] rs_entry_r2_stat_1_o;
reg rs_entry_r2_stat_1_o_ap_vld;
reg[31:0] rs_entry_4_1_1_o;
reg rs_entry_4_1_1_o_ap_vld;
reg[31:0] rs_entry_r1_stat_2_o;
reg rs_entry_r1_stat_2_o_ap_vld;
reg[31:0] rs_entry_3_1_2_o;
reg rs_entry_3_1_2_o_ap_vld;
reg[31:0] rs_entry_r2_stat_2_o;
reg rs_entry_r2_stat_2_o_ap_vld;
reg[31:0] rs_entry_4_1_2_o;
reg rs_entry_4_1_2_o_ap_vld;
reg[31:0] rs_entry_r1_stat_3_o;
reg rs_entry_r1_stat_3_o_ap_vld;
reg[31:0] rs_entry_3_1_3_o;
reg rs_entry_3_1_3_o_ap_vld;
reg[31:0] rs_entry_r2_stat_3_o;
reg rs_entry_r2_stat_3_o_ap_vld;
reg[31:0] rs_entry_4_1_3_o;
reg rs_entry_4_1_3_o_ap_vld;
reg[31:0] rs_entry_r1_stat_4_o;
reg rs_entry_r1_stat_4_o_ap_vld;
reg[31:0] rs_entry_3_1_4_o;
reg rs_entry_3_1_4_o_ap_vld;
reg[31:0] rs_entry_r2_stat_4_o;
reg rs_entry_r2_stat_4_o_ap_vld;
reg[31:0] rs_entry_4_1_4_o;
reg rs_entry_4_1_4_o_ap_vld;
reg[31:0] rs_entry_r1_stat_5_o;
reg rs_entry_r1_stat_5_o_ap_vld;
reg[31:0] rs_entry_3_1_5_o;
reg rs_entry_3_1_5_o_ap_vld;
reg[31:0] rs_entry_r2_stat_5_o;
reg rs_entry_r2_stat_5_o_ap_vld;
reg[31:0] rs_entry_4_1_5_o;
reg rs_entry_4_1_5_o_ap_vld;
reg rs_entry_valid_0_ap_vld;
reg rs_entry_valid_1_ap_vld;
reg rs_entry_valid_2_ap_vld;
reg rs_entry_valid_3_ap_vld;
reg rs_entry_valid_4_ap_vld;
reg rs_entry_valid_5_ap_vld;

wire   [0:0] and_ln115_fu_226_p2;
wire   [0:0] and_ln119_fu_264_p2;
wire   [0:0] and_ln115_1_fu_302_p2;
wire   [0:0] and_ln119_1_fu_340_p2;
wire   [0:0] and_ln115_2_fu_378_p2;
wire   [0:0] and_ln119_2_fu_416_p2;
wire   [0:0] and_ln115_3_fu_454_p2;
wire   [0:0] and_ln119_3_fu_492_p2;
wire   [0:0] and_ln115_4_fu_530_p2;
wire   [0:0] and_ln119_4_fu_568_p2;
wire   [0:0] and_ln115_5_fu_606_p2;
wire   [0:0] and_ln119_5_fu_644_p2;
wire   [0:0] and_ln105_fu_130_p2;
wire   [0:0] and_ln108_fu_154_p2;
wire   [2:0] trunc_ln111_fu_166_p1;
wire   [0:0] tmp_fu_110_p3;
wire   [0:0] icmp_ln105_fu_124_p2;
wire   [0:0] xor_ln105_fu_118_p2;
wire   [0:0] icmp_ln108_fu_142_p2;
wire   [0:0] icmp_ln108_1_fu_148_p2;
wire   [0:0] icmp_ln115_fu_210_p2;
wire   [0:0] icmp_ln115_1_fu_220_p2;
wire   [0:0] icmp_ln119_fu_248_p2;
wire   [0:0] icmp_ln119_1_fu_258_p2;
wire   [0:0] icmp_ln115_2_fu_286_p2;
wire   [0:0] icmp_ln115_3_fu_296_p2;
wire   [0:0] icmp_ln119_2_fu_324_p2;
wire   [0:0] icmp_ln119_3_fu_334_p2;
wire   [0:0] icmp_ln115_4_fu_362_p2;
wire   [0:0] icmp_ln115_5_fu_372_p2;
wire   [0:0] icmp_ln119_4_fu_400_p2;
wire   [0:0] icmp_ln119_5_fu_410_p2;
wire   [0:0] icmp_ln115_6_fu_438_p2;
wire   [0:0] icmp_ln115_7_fu_448_p2;
wire   [0:0] icmp_ln119_6_fu_476_p2;
wire   [0:0] icmp_ln119_7_fu_486_p2;
wire   [0:0] icmp_ln115_8_fu_514_p2;
wire   [0:0] icmp_ln115_9_fu_524_p2;
wire   [0:0] icmp_ln119_8_fu_552_p2;
wire   [0:0] icmp_ln119_9_fu_562_p2;
wire   [0:0] icmp_ln115_10_fu_590_p2;
wire   [0:0] icmp_ln115_11_fu_600_p2;
wire   [0:0] icmp_ln119_10_fu_628_p2;
wire   [0:0] icmp_ln119_11_fu_638_p2;
wire    ap_ce_reg;

always @ (*) begin
    if ((1'd1 == and_ln105_fu_130_p2)) begin
        rs_adders_status_busy_0_ap_vld = 1'b1;
    end else begin
        rs_adders_status_busy_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_fu_226_p2)) begin
        rs_entry_3_1_0_o = value_r;
    end else begin
        rs_entry_3_1_0_o = rs_entry_3_1_0_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_fu_226_p2)) begin
        rs_entry_3_1_0_o_ap_vld = 1'b1;
    end else begin
        rs_entry_3_1_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_1_fu_302_p2)) begin
        rs_entry_3_1_1_o = value_r;
    end else begin
        rs_entry_3_1_1_o = rs_entry_3_1_1_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_1_fu_302_p2)) begin
        rs_entry_3_1_1_o_ap_vld = 1'b1;
    end else begin
        rs_entry_3_1_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_2_fu_378_p2)) begin
        rs_entry_3_1_2_o = value_r;
    end else begin
        rs_entry_3_1_2_o = rs_entry_3_1_2_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_2_fu_378_p2)) begin
        rs_entry_3_1_2_o_ap_vld = 1'b1;
    end else begin
        rs_entry_3_1_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_3_fu_454_p2)) begin
        rs_entry_3_1_3_o = value_r;
    end else begin
        rs_entry_3_1_3_o = rs_entry_3_1_3_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_3_fu_454_p2)) begin
        rs_entry_3_1_3_o_ap_vld = 1'b1;
    end else begin
        rs_entry_3_1_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_4_fu_530_p2)) begin
        rs_entry_3_1_4_o = value_r;
    end else begin
        rs_entry_3_1_4_o = rs_entry_3_1_4_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_4_fu_530_p2)) begin
        rs_entry_3_1_4_o_ap_vld = 1'b1;
    end else begin
        rs_entry_3_1_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_5_fu_606_p2)) begin
        rs_entry_3_1_5_o = value_r;
    end else begin
        rs_entry_3_1_5_o = rs_entry_3_1_5_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_5_fu_606_p2)) begin
        rs_entry_3_1_5_o_ap_vld = 1'b1;
    end else begin
        rs_entry_3_1_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_fu_264_p2)) begin
        rs_entry_4_1_0_o = value_r;
    end else begin
        rs_entry_4_1_0_o = rs_entry_4_1_0_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_fu_264_p2)) begin
        rs_entry_4_1_0_o_ap_vld = 1'b1;
    end else begin
        rs_entry_4_1_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_1_fu_340_p2)) begin
        rs_entry_4_1_1_o = value_r;
    end else begin
        rs_entry_4_1_1_o = rs_entry_4_1_1_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_1_fu_340_p2)) begin
        rs_entry_4_1_1_o_ap_vld = 1'b1;
    end else begin
        rs_entry_4_1_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_2_fu_416_p2)) begin
        rs_entry_4_1_2_o = value_r;
    end else begin
        rs_entry_4_1_2_o = rs_entry_4_1_2_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_2_fu_416_p2)) begin
        rs_entry_4_1_2_o_ap_vld = 1'b1;
    end else begin
        rs_entry_4_1_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_3_fu_492_p2)) begin
        rs_entry_4_1_3_o = value_r;
    end else begin
        rs_entry_4_1_3_o = rs_entry_4_1_3_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_3_fu_492_p2)) begin
        rs_entry_4_1_3_o_ap_vld = 1'b1;
    end else begin
        rs_entry_4_1_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_4_fu_568_p2)) begin
        rs_entry_4_1_4_o = value_r;
    end else begin
        rs_entry_4_1_4_o = rs_entry_4_1_4_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_4_fu_568_p2)) begin
        rs_entry_4_1_4_o_ap_vld = 1'b1;
    end else begin
        rs_entry_4_1_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_5_fu_644_p2)) begin
        rs_entry_4_1_5_o = value_r;
    end else begin
        rs_entry_4_1_5_o = rs_entry_4_1_5_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_5_fu_644_p2)) begin
        rs_entry_4_1_5_o_ap_vld = 1'b1;
    end else begin
        rs_entry_4_1_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_fu_226_p2)) begin
        rs_entry_r1_stat_0_o = 32'd1;
    end else begin
        rs_entry_r1_stat_0_o = rs_entry_r1_stat_0_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_fu_226_p2)) begin
        rs_entry_r1_stat_0_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r1_stat_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_1_fu_302_p2)) begin
        rs_entry_r1_stat_1_o = 32'd1;
    end else begin
        rs_entry_r1_stat_1_o = rs_entry_r1_stat_1_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_1_fu_302_p2)) begin
        rs_entry_r1_stat_1_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r1_stat_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_2_fu_378_p2)) begin
        rs_entry_r1_stat_2_o = 32'd1;
    end else begin
        rs_entry_r1_stat_2_o = rs_entry_r1_stat_2_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_2_fu_378_p2)) begin
        rs_entry_r1_stat_2_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r1_stat_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_3_fu_454_p2)) begin
        rs_entry_r1_stat_3_o = 32'd1;
    end else begin
        rs_entry_r1_stat_3_o = rs_entry_r1_stat_3_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_3_fu_454_p2)) begin
        rs_entry_r1_stat_3_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r1_stat_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_4_fu_530_p2)) begin
        rs_entry_r1_stat_4_o = 32'd1;
    end else begin
        rs_entry_r1_stat_4_o = rs_entry_r1_stat_4_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_4_fu_530_p2)) begin
        rs_entry_r1_stat_4_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r1_stat_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_5_fu_606_p2)) begin
        rs_entry_r1_stat_5_o = 32'd1;
    end else begin
        rs_entry_r1_stat_5_o = rs_entry_r1_stat_5_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln115_5_fu_606_p2)) begin
        rs_entry_r1_stat_5_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r1_stat_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_fu_264_p2)) begin
        rs_entry_r2_stat_0_o = 32'd1;
    end else begin
        rs_entry_r2_stat_0_o = rs_entry_r2_stat_0_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_fu_264_p2)) begin
        rs_entry_r2_stat_0_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r2_stat_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_1_fu_340_p2)) begin
        rs_entry_r2_stat_1_o = 32'd1;
    end else begin
        rs_entry_r2_stat_1_o = rs_entry_r2_stat_1_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_1_fu_340_p2)) begin
        rs_entry_r2_stat_1_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r2_stat_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_2_fu_416_p2)) begin
        rs_entry_r2_stat_2_o = 32'd1;
    end else begin
        rs_entry_r2_stat_2_o = rs_entry_r2_stat_2_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_2_fu_416_p2)) begin
        rs_entry_r2_stat_2_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r2_stat_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_3_fu_492_p2)) begin
        rs_entry_r2_stat_3_o = 32'd1;
    end else begin
        rs_entry_r2_stat_3_o = rs_entry_r2_stat_3_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_3_fu_492_p2)) begin
        rs_entry_r2_stat_3_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r2_stat_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_4_fu_568_p2)) begin
        rs_entry_r2_stat_4_o = 32'd1;
    end else begin
        rs_entry_r2_stat_4_o = rs_entry_r2_stat_4_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_4_fu_568_p2)) begin
        rs_entry_r2_stat_4_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r2_stat_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_5_fu_644_p2)) begin
        rs_entry_r2_stat_5_o = 32'd1;
    end else begin
        rs_entry_r2_stat_5_o = rs_entry_r2_stat_5_i;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln119_5_fu_644_p2)) begin
        rs_entry_r2_stat_5_o_ap_vld = 1'b1;
    end else begin
        rs_entry_r2_stat_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((trunc_ln111_fu_166_p1 == 3'd0)) begin
        rs_entry_valid_0_ap_vld = 1'b1;
    end else begin
        rs_entry_valid_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((trunc_ln111_fu_166_p1 == 3'd1)) begin
        rs_entry_valid_1_ap_vld = 1'b1;
    end else begin
        rs_entry_valid_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((trunc_ln111_fu_166_p1 == 3'd2)) begin
        rs_entry_valid_2_ap_vld = 1'b1;
    end else begin
        rs_entry_valid_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((trunc_ln111_fu_166_p1 == 3'd3)) begin
        rs_entry_valid_3_ap_vld = 1'b1;
    end else begin
        rs_entry_valid_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((trunc_ln111_fu_166_p1 == 3'd4)) begin
        rs_entry_valid_4_ap_vld = 1'b1;
    end else begin
        rs_entry_valid_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln111_fu_166_p1 == 3'd5) | ((trunc_ln111_fu_166_p1 == 3'd6) | (trunc_ln111_fu_166_p1 == 3'd7)))) begin
        rs_entry_valid_5_ap_vld = 1'b1;
    end else begin
        rs_entry_valid_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == and_ln108_fu_154_p2)) begin
        rs_multipliers_status_busy_0_ap_vld = 1'b1;
    end else begin
        rs_multipliers_status_busy_0_ap_vld = 1'b0;
    end
end

assign and_ln105_fu_130_p2 = (xor_ln105_fu_118_p2 & icmp_ln105_fu_124_p2);

assign and_ln108_fu_154_p2 = (icmp_ln108_fu_142_p2 & icmp_ln108_1_fu_148_p2);

assign and_ln115_1_fu_302_p2 = (icmp_ln115_3_fu_296_p2 & icmp_ln115_2_fu_286_p2);

assign and_ln115_2_fu_378_p2 = (icmp_ln115_5_fu_372_p2 & icmp_ln115_4_fu_362_p2);

assign and_ln115_3_fu_454_p2 = (icmp_ln115_7_fu_448_p2 & icmp_ln115_6_fu_438_p2);

assign and_ln115_4_fu_530_p2 = (icmp_ln115_9_fu_524_p2 & icmp_ln115_8_fu_514_p2);

assign and_ln115_5_fu_606_p2 = (icmp_ln115_11_fu_600_p2 & icmp_ln115_10_fu_590_p2);

assign and_ln115_fu_226_p2 = (icmp_ln115_fu_210_p2 & icmp_ln115_1_fu_220_p2);

assign and_ln119_1_fu_340_p2 = (icmp_ln119_3_fu_334_p2 & icmp_ln119_2_fu_324_p2);

assign and_ln119_2_fu_416_p2 = (icmp_ln119_5_fu_410_p2 & icmp_ln119_4_fu_400_p2);

assign and_ln119_3_fu_492_p2 = (icmp_ln119_7_fu_486_p2 & icmp_ln119_6_fu_476_p2);

assign and_ln119_4_fu_568_p2 = (icmp_ln119_9_fu_562_p2 & icmp_ln119_8_fu_552_p2);

assign and_ln119_5_fu_644_p2 = (icmp_ln119_11_fu_638_p2 & icmp_ln119_10_fu_628_p2);

assign and_ln119_fu_264_p2 = (icmp_ln119_fu_248_p2 & icmp_ln119_1_fu_258_p2);

assign ap_ready = 1'b1;

assign icmp_ln105_fu_124_p2 = (($signed(sym) < $signed(32'd3)) ? 1'b1 : 1'b0);

assign icmp_ln108_1_fu_148_p2 = (($signed(sym) < $signed(32'd6)) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_142_p2 = (($signed(sym) > $signed(32'd2)) ? 1'b1 : 1'b0);

assign icmp_ln115_10_fu_590_p2 = ((rs_entry_r1_stat_5_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln115_11_fu_600_p2 = ((rs_entry_3_1_5_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln115_1_fu_220_p2 = ((rs_entry_3_1_0_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln115_2_fu_286_p2 = ((rs_entry_r1_stat_1_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln115_3_fu_296_p2 = ((rs_entry_3_1_1_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln115_4_fu_362_p2 = ((rs_entry_r1_stat_2_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln115_5_fu_372_p2 = ((rs_entry_3_1_2_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln115_6_fu_438_p2 = ((rs_entry_r1_stat_3_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln115_7_fu_448_p2 = ((rs_entry_3_1_3_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln115_8_fu_514_p2 = ((rs_entry_r1_stat_4_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln115_9_fu_524_p2 = ((rs_entry_3_1_4_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_210_p2 = ((rs_entry_r1_stat_0_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln119_10_fu_628_p2 = ((rs_entry_r2_stat_5_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln119_11_fu_638_p2 = ((rs_entry_4_1_5_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln119_1_fu_258_p2 = ((rs_entry_4_1_0_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln119_2_fu_324_p2 = ((rs_entry_r2_stat_1_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln119_3_fu_334_p2 = ((rs_entry_4_1_1_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln119_4_fu_400_p2 = ((rs_entry_r2_stat_2_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln119_5_fu_410_p2 = ((rs_entry_4_1_2_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln119_6_fu_476_p2 = ((rs_entry_r2_stat_3_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln119_7_fu_486_p2 = ((rs_entry_4_1_3_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln119_8_fu_552_p2 = ((rs_entry_r2_stat_4_i == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln119_9_fu_562_p2 = ((rs_entry_4_1_4_i == sym) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_248_p2 = ((rs_entry_r2_stat_0_i == 32'd0) ? 1'b1 : 1'b0);

assign rs_adders_status_busy_0 = 1'd0;

assign rs_entry_valid_0 = 1'd1;

assign rs_entry_valid_1 = 1'd1;

assign rs_entry_valid_2 = 1'd1;

assign rs_entry_valid_3 = 1'd1;

assign rs_entry_valid_4 = 1'd1;

assign rs_entry_valid_5 = 1'd1;

assign rs_multipliers_status_busy_0 = 1'd0;

assign tmp_fu_110_p3 = sym[32'd31];

assign trunc_ln111_fu_166_p1 = sym[2:0];

assign xor_ln105_fu_118_p2 = (tmp_fu_110_p3 ^ 1'd1);

endmodule //cpu_write_from_CDB
