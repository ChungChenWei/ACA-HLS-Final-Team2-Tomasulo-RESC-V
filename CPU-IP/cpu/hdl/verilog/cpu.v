// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cpu_cpu,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.773000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=27513,HLS_SYN_LUT=26751,HLS_VERSION=2020_2}" *)

module cpu (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_pp1_stage0 = 31'd536870912;
parameter    ap_ST_fsm_state32 = 31'd1073741824;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] instruction_memory_i_address0;
reg    instruction_memory_i_ce0;
wire   [31:0] instruction_memory_i_q0;
wire   [4:0] final_register_file_o_address0;
reg    final_register_file_o_ce0;
reg    final_register_file_o_we0;
reg   [5:0] i_reg_983;
wire   [31:0] cycle_1_fu_1213_p2;
reg   [31:0] cycle_1_reg_1614;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln47_fu_1239_p2;
wire   [4:0] add_ln60_fu_1250_p2;
reg   [4:0] add_ln60_reg_1627;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state28;
wire   [4:0] PC_1_fu_1516_p3;
wire   [5:0] add_ln33_fu_1523_p2;
reg   [5:0] add_ln33_reg_1962;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state30_pp1_stage0_iter0;
wire    ap_block_state31_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln33_fu_1529_p2;
reg   [0:0] icmp_ln33_reg_1967;
wire   [31:0] tmp_fu_1539_p34;
reg   [31:0] tmp_reg_1971;
wire    ap_CS_fsm_state29;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state30;
reg    ap_enable_reg_pp1_iter1;
wire    grp_every_cycle_fu_995_ap_start;
wire    grp_every_cycle_fu_995_ap_done;
wire    grp_every_cycle_fu_995_ap_idle;
wire    grp_every_cycle_fu_995_ap_ready;
reg    grp_every_cycle_fu_995_ap_ce;
wire    grp_every_cycle_fu_995_front_end_to_adder_read;
wire   [159:0] grp_every_cycle_fu_995_front_end_to_adder_din;
wire    grp_every_cycle_fu_995_front_end_to_adder_write;
wire    grp_every_cycle_fu_995_front_end_to_multiplier_read;
wire   [159:0] grp_every_cycle_fu_995_front_end_to_multiplier_din;
wire    grp_every_cycle_fu_995_front_end_to_multiplier_write;
wire   [0:0] grp_every_cycle_fu_995_ap_return_0;
wire   [31:0] grp_every_cycle_fu_995_ap_return_1;
wire   [31:0] grp_every_cycle_fu_995_ap_return_2;
wire   [31:0] grp_every_cycle_fu_995_ap_return_3;
wire   [31:0] grp_every_cycle_fu_995_ap_return_4;
wire   [31:0] grp_every_cycle_fu_995_ap_return_5;
wire   [31:0] grp_every_cycle_fu_995_ap_return_6;
wire   [31:0] grp_every_cycle_fu_995_ap_return_7;
wire   [31:0] grp_every_cycle_fu_995_ap_return_8;
wire   [31:0] grp_every_cycle_fu_995_ap_return_9;
wire   [31:0] grp_every_cycle_fu_995_ap_return_10;
wire   [31:0] grp_every_cycle_fu_995_ap_return_11;
wire   [31:0] grp_every_cycle_fu_995_ap_return_12;
wire   [31:0] grp_every_cycle_fu_995_ap_return_13;
wire   [31:0] grp_every_cycle_fu_995_ap_return_14;
wire   [31:0] grp_every_cycle_fu_995_ap_return_15;
wire   [31:0] grp_every_cycle_fu_995_ap_return_16;
wire   [31:0] grp_every_cycle_fu_995_ap_return_17;
wire   [31:0] grp_every_cycle_fu_995_ap_return_18;
wire   [31:0] grp_every_cycle_fu_995_ap_return_19;
wire   [31:0] grp_every_cycle_fu_995_ap_return_20;
wire   [31:0] grp_every_cycle_fu_995_ap_return_21;
wire   [31:0] grp_every_cycle_fu_995_ap_return_22;
wire   [31:0] grp_every_cycle_fu_995_ap_return_23;
wire   [31:0] grp_every_cycle_fu_995_ap_return_24;
wire   [31:0] grp_every_cycle_fu_995_ap_return_25;
wire   [31:0] grp_every_cycle_fu_995_ap_return_26;
wire   [31:0] grp_every_cycle_fu_995_ap_return_27;
wire   [31:0] grp_every_cycle_fu_995_ap_return_28;
wire   [31:0] grp_every_cycle_fu_995_ap_return_29;
wire   [31:0] grp_every_cycle_fu_995_ap_return_30;
wire   [31:0] grp_every_cycle_fu_995_ap_return_31;
wire   [31:0] grp_every_cycle_fu_995_ap_return_32;
wire   [31:0] grp_every_cycle_fu_995_ap_return_33;
wire   [31:0] grp_every_cycle_fu_995_ap_return_34;
wire   [31:0] grp_every_cycle_fu_995_ap_return_35;
wire   [31:0] grp_every_cycle_fu_995_ap_return_36;
wire   [31:0] grp_every_cycle_fu_995_ap_return_37;
wire   [31:0] grp_every_cycle_fu_995_ap_return_38;
wire   [31:0] grp_every_cycle_fu_995_ap_return_39;
wire   [31:0] grp_every_cycle_fu_995_ap_return_40;
wire   [31:0] grp_every_cycle_fu_995_ap_return_41;
wire   [31:0] grp_every_cycle_fu_995_ap_return_42;
wire   [31:0] grp_every_cycle_fu_995_ap_return_43;
wire   [31:0] grp_every_cycle_fu_995_ap_return_44;
wire   [31:0] grp_every_cycle_fu_995_ap_return_45;
wire   [31:0] grp_every_cycle_fu_995_ap_return_46;
wire   [31:0] grp_every_cycle_fu_995_ap_return_47;
wire   [31:0] grp_every_cycle_fu_995_ap_return_48;
wire   [31:0] grp_every_cycle_fu_995_ap_return_49;
wire   [31:0] grp_every_cycle_fu_995_ap_return_50;
wire   [31:0] grp_every_cycle_fu_995_ap_return_51;
wire   [31:0] grp_every_cycle_fu_995_ap_return_52;
wire   [31:0] grp_every_cycle_fu_995_ap_return_53;
wire   [31:0] grp_every_cycle_fu_995_ap_return_54;
wire   [31:0] grp_every_cycle_fu_995_ap_return_55;
wire   [31:0] grp_every_cycle_fu_995_ap_return_56;
wire   [31:0] grp_every_cycle_fu_995_ap_return_57;
wire   [31:0] grp_every_cycle_fu_995_ap_return_58;
wire   [31:0] grp_every_cycle_fu_995_ap_return_59;
wire   [31:0] grp_every_cycle_fu_995_ap_return_60;
wire   [31:0] grp_every_cycle_fu_995_ap_return_61;
wire   [31:0] grp_every_cycle_fu_995_ap_return_62;
wire   [31:0] grp_every_cycle_fu_995_ap_return_63;
wire   [31:0] grp_every_cycle_fu_995_ap_return_64;
wire    grp_every_cycle_fu_995_front_end_to_adder_i_blk_n;
wire    grp_every_cycle_fu_995_front_end_to_multiplier_i_blk_n;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state32;
reg   [31:0] rf_reg_value_31_0_reg_192;
reg   [31:0] rf_reg_value_30_0_reg_204;
reg   [31:0] rf_reg_value_29_0_reg_216;
reg   [31:0] rf_reg_value_28_0_reg_228;
reg   [31:0] rf_reg_value_27_0_reg_240;
reg   [31:0] rf_reg_value_26_0_reg_252;
reg   [31:0] rf_reg_value_25_0_reg_264;
reg   [31:0] rf_reg_value_24_0_reg_276;
reg   [31:0] rf_reg_value_23_0_reg_288;
reg   [31:0] rf_reg_value_22_0_reg_300;
reg   [31:0] rf_reg_value_21_0_reg_312;
reg   [31:0] rf_reg_value_20_0_reg_324;
reg   [31:0] rf_reg_value_19_0_reg_336;
reg   [31:0] rf_reg_value_18_0_reg_348;
reg   [31:0] rf_reg_value_17_0_reg_360;
reg   [31:0] rf_reg_value_16_0_reg_372;
reg   [31:0] rf_reg_value_15_0_reg_384;
reg   [31:0] rf_reg_value_14_0_reg_396;
reg   [31:0] rf_reg_value_13_0_reg_408;
reg   [31:0] rf_reg_value_12_0_reg_420;
reg   [31:0] rf_reg_value_11_0_reg_432;
reg   [31:0] rf_reg_value_10_0_reg_444;
reg   [31:0] rf_reg_value_9_0_reg_456;
reg   [31:0] rf_reg_value_8_0_reg_468;
reg   [31:0] rf_reg_value_7_0_reg_480;
reg   [31:0] rf_reg_value_6_0_reg_492;
reg   [31:0] rf_reg_value_5_0_reg_504;
reg   [31:0] rf_reg_value_4_0_reg_516;
reg   [31:0] rf_reg_value_3_0_reg_528;
reg   [31:0] rf_reg_value_2_0_reg_540;
reg   [31:0] rf_reg_value_1_0_reg_552;
reg   [31:0] rf_reg_value_0_0_reg_564;
reg   [31:0] rf_reg_stat_31_0_reg_576;
reg   [31:0] rf_reg_stat_30_0_reg_588;
reg   [31:0] rf_reg_stat_29_0_reg_600;
reg   [31:0] rf_reg_stat_28_0_reg_612;
reg   [31:0] rf_reg_stat_27_0_reg_624;
reg   [31:0] rf_reg_stat_26_0_reg_636;
reg   [31:0] rf_reg_stat_25_0_reg_648;
reg   [31:0] rf_reg_stat_24_0_reg_660;
reg   [31:0] rf_reg_stat_23_0_reg_672;
reg   [31:0] rf_reg_stat_22_0_reg_684;
reg   [31:0] rf_reg_stat_21_0_reg_696;
reg   [31:0] rf_reg_stat_20_0_reg_708;
reg   [31:0] rf_reg_stat_19_0_reg_720;
reg   [31:0] rf_reg_stat_18_0_reg_732;
reg   [31:0] rf_reg_stat_17_0_reg_744;
reg   [31:0] rf_reg_stat_16_0_reg_756;
reg   [31:0] rf_reg_stat_15_0_reg_768;
reg   [31:0] rf_reg_stat_14_0_reg_780;
reg   [31:0] rf_reg_stat_13_0_reg_792;
reg   [31:0] rf_reg_stat_12_0_reg_804;
reg   [31:0] rf_reg_stat_11_0_reg_816;
reg   [31:0] rf_reg_stat_10_0_reg_828;
reg   [31:0] rf_reg_stat_9_0_reg_840;
reg   [31:0] rf_reg_stat_8_0_reg_852;
reg   [31:0] rf_reg_stat_7_0_reg_864;
reg   [31:0] rf_reg_stat_6_0_reg_876;
reg   [31:0] rf_reg_stat_5_0_reg_888;
reg   [31:0] rf_reg_stat_4_0_reg_900;
reg   [31:0] rf_reg_stat_3_0_reg_912;
reg   [31:0] rf_reg_stat_2_0_reg_924;
reg   [31:0] rf_reg_stat_1_0_reg_936;
reg   [31:0] rf_reg_stat_0_0_reg_948;
reg   [31:0] cycle_reg_960;
reg   [4:0] PC_reg_971;
reg   [5:0] ap_phi_mux_i_phi_fu_987_p4;
wire    ap_block_pp1_stage0;
reg    grp_every_cycle_fu_995_ap_start_reg;
reg   [30:0] ap_NS_fsm;
wire    ap_NS_fsm_state3;
wire   [159:0] front_end_to_adder_dout;
wire    front_end_to_adder_empty_n;
reg    front_end_to_adder_read;
wire    front_end_to_adder_full_n;
reg    front_end_to_adder_write;
wire   [159:0] front_end_to_multiplier_dout;
wire    front_end_to_multiplier_empty_n;
reg    front_end_to_multiplier_read;
wire    front_end_to_multiplier_full_n;
reg    front_end_to_multiplier_write;
wire   [63:0] zext_ln53_fu_1245_p1;
wire   [63:0] i_cast_fu_1609_p1;
wire   [0:0] tmp_3_fu_1219_p3;
wire   [0:0] icmp_ln47_1_fu_1233_p2;
wire   [0:0] xor_ln47_fu_1227_p2;
wire   [4:0] tmp_fu_1539_p33;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_every_cycle_fu_995_ap_start_reg = 1'b0;
end

cpu_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .instruction_memory_i_address0(instruction_memory_i_address0),
    .instruction_memory_i_ce0(instruction_memory_i_ce0),
    .instruction_memory_i_q0(instruction_memory_i_q0),
    .final_register_file_o_address0(final_register_file_o_address0),
    .final_register_file_o_ce0(final_register_file_o_ce0),
    .final_register_file_o_we0(final_register_file_o_we0),
    .final_register_file_o_d0(tmp_reg_1971),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

cpu_every_cycle grp_every_cycle_fu_995(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_every_cycle_fu_995_ap_start),
    .ap_done(grp_every_cycle_fu_995_ap_done),
    .ap_idle(grp_every_cycle_fu_995_ap_idle),
    .ap_ready(grp_every_cycle_fu_995_ap_ready),
    .ap_ce(grp_every_cycle_fu_995_ap_ce),
    .instruction_i(instruction_memory_i_q0),
    .rf_stat_read(rf_reg_stat_0_0_reg_948),
    .rf_stat12_read(rf_reg_stat_1_0_reg_936),
    .rf_stat2_read(rf_reg_stat_2_0_reg_924),
    .rf_stat3_read(rf_reg_stat_3_0_reg_912),
    .rf_stat4_read(rf_reg_stat_4_0_reg_900),
    .rf_stat5_read(rf_reg_stat_5_0_reg_888),
    .rf_stat6_read(rf_reg_stat_6_0_reg_876),
    .rf_stat7_read(rf_reg_stat_7_0_reg_864),
    .rf_stat8_read(rf_reg_stat_8_0_reg_852),
    .rf_stat9_read(rf_reg_stat_9_0_reg_840),
    .rf_stat10_read(rf_reg_stat_10_0_reg_828),
    .rf_stat11_read(rf_reg_stat_11_0_reg_816),
    .rf_stat1214_read(rf_reg_stat_12_0_reg_804),
    .rf_stat13_read(rf_reg_stat_13_0_reg_792),
    .rf_stat14_read(rf_reg_stat_14_0_reg_780),
    .rf_stat15_read(rf_reg_stat_15_0_reg_768),
    .rf_stat16_read(rf_reg_stat_16_0_reg_756),
    .rf_stat17_read(rf_reg_stat_17_0_reg_744),
    .rf_stat18_read(rf_reg_stat_18_0_reg_732),
    .rf_stat19_read(rf_reg_stat_19_0_reg_720),
    .rf_stat20_read(rf_reg_stat_20_0_reg_708),
    .rf_stat21_read(rf_reg_stat_21_0_reg_696),
    .rf_stat22_read(rf_reg_stat_22_0_reg_684),
    .rf_stat23_read(rf_reg_stat_23_0_reg_672),
    .rf_stat2427_read(rf_reg_stat_24_0_reg_660),
    .rf_stat25_read(rf_reg_stat_25_0_reg_648),
    .rf_stat26_read(rf_reg_stat_26_0_reg_636),
    .rf_stat27_read(rf_reg_stat_27_0_reg_624),
    .rf_stat28_read(rf_reg_stat_28_0_reg_612),
    .rf_stat29_read(rf_reg_stat_29_0_reg_600),
    .rf_stat30_read(rf_reg_stat_30_0_reg_588),
    .rf_stat31_read(rf_reg_stat_31_0_reg_576),
    .rf_value_read(rf_reg_value_0_0_reg_564),
    .rf_value32_read(rf_reg_value_1_0_reg_552),
    .rf_value33_read(rf_reg_value_2_0_reg_540),
    .rf_value34_read(rf_reg_value_3_0_reg_528),
    .rf_value35_read(rf_reg_value_4_0_reg_516),
    .rf_value3641_read(rf_reg_value_5_0_reg_504),
    .rf_value37_read(rf_reg_value_6_0_reg_492),
    .rf_value38_read(rf_reg_value_7_0_reg_480),
    .rf_value39_read(rf_reg_value_8_0_reg_468),
    .rf_value40_read(rf_reg_value_9_0_reg_456),
    .rf_value41_read(rf_reg_value_10_0_reg_444),
    .rf_value42_read(rf_reg_value_11_0_reg_432),
    .rf_value43_read(rf_reg_value_12_0_reg_420),
    .rf_value44_read(rf_reg_value_13_0_reg_408),
    .rf_value45_read(rf_reg_value_14_0_reg_396),
    .rf_value46_read(rf_reg_value_15_0_reg_384),
    .rf_value47_read(rf_reg_value_16_0_reg_372),
    .rf_value48_read(rf_reg_value_17_0_reg_360),
    .rf_value49_read(rf_reg_value_18_0_reg_348),
    .rf_value50_read(rf_reg_value_19_0_reg_336),
    .rf_value51_read(rf_reg_value_20_0_reg_324),
    .rf_value52_read(rf_reg_value_21_0_reg_312),
    .rf_value53_read(rf_reg_value_22_0_reg_300),
    .rf_value54_read(rf_reg_value_23_0_reg_288),
    .rf_value55_read(rf_reg_value_24_0_reg_276),
    .rf_value56_read(rf_reg_value_25_0_reg_264),
    .rf_value57_read(rf_reg_value_26_0_reg_252),
    .rf_value58_read(rf_reg_value_27_0_reg_240),
    .rf_value59_read(rf_reg_value_28_0_reg_228),
    .rf_value60_read(rf_reg_value_29_0_reg_216),
    .rf_value61_read(rf_reg_value_30_0_reg_204),
    .rf_value62_read(rf_reg_value_31_0_reg_192),
    .front_end_to_adder_dout(front_end_to_adder_dout),
    .front_end_to_adder_empty_n(front_end_to_adder_empty_n),
    .front_end_to_adder_read(grp_every_cycle_fu_995_front_end_to_adder_read),
    .front_end_to_adder_din(grp_every_cycle_fu_995_front_end_to_adder_din),
    .front_end_to_adder_full_n(front_end_to_adder_full_n),
    .front_end_to_adder_write(grp_every_cycle_fu_995_front_end_to_adder_write),
    .front_end_to_multiplier_dout(front_end_to_multiplier_dout),
    .front_end_to_multiplier_empty_n(front_end_to_multiplier_empty_n),
    .front_end_to_multiplier_read(grp_every_cycle_fu_995_front_end_to_multiplier_read),
    .front_end_to_multiplier_din(grp_every_cycle_fu_995_front_end_to_multiplier_din),
    .front_end_to_multiplier_full_n(front_end_to_multiplier_full_n),
    .front_end_to_multiplier_write(grp_every_cycle_fu_995_front_end_to_multiplier_write),
    .ap_return_0(grp_every_cycle_fu_995_ap_return_0),
    .ap_return_1(grp_every_cycle_fu_995_ap_return_1),
    .ap_return_2(grp_every_cycle_fu_995_ap_return_2),
    .ap_return_3(grp_every_cycle_fu_995_ap_return_3),
    .ap_return_4(grp_every_cycle_fu_995_ap_return_4),
    .ap_return_5(grp_every_cycle_fu_995_ap_return_5),
    .ap_return_6(grp_every_cycle_fu_995_ap_return_6),
    .ap_return_7(grp_every_cycle_fu_995_ap_return_7),
    .ap_return_8(grp_every_cycle_fu_995_ap_return_8),
    .ap_return_9(grp_every_cycle_fu_995_ap_return_9),
    .ap_return_10(grp_every_cycle_fu_995_ap_return_10),
    .ap_return_11(grp_every_cycle_fu_995_ap_return_11),
    .ap_return_12(grp_every_cycle_fu_995_ap_return_12),
    .ap_return_13(grp_every_cycle_fu_995_ap_return_13),
    .ap_return_14(grp_every_cycle_fu_995_ap_return_14),
    .ap_return_15(grp_every_cycle_fu_995_ap_return_15),
    .ap_return_16(grp_every_cycle_fu_995_ap_return_16),
    .ap_return_17(grp_every_cycle_fu_995_ap_return_17),
    .ap_return_18(grp_every_cycle_fu_995_ap_return_18),
    .ap_return_19(grp_every_cycle_fu_995_ap_return_19),
    .ap_return_20(grp_every_cycle_fu_995_ap_return_20),
    .ap_return_21(grp_every_cycle_fu_995_ap_return_21),
    .ap_return_22(grp_every_cycle_fu_995_ap_return_22),
    .ap_return_23(grp_every_cycle_fu_995_ap_return_23),
    .ap_return_24(grp_every_cycle_fu_995_ap_return_24),
    .ap_return_25(grp_every_cycle_fu_995_ap_return_25),
    .ap_return_26(grp_every_cycle_fu_995_ap_return_26),
    .ap_return_27(grp_every_cycle_fu_995_ap_return_27),
    .ap_return_28(grp_every_cycle_fu_995_ap_return_28),
    .ap_return_29(grp_every_cycle_fu_995_ap_return_29),
    .ap_return_30(grp_every_cycle_fu_995_ap_return_30),
    .ap_return_31(grp_every_cycle_fu_995_ap_return_31),
    .ap_return_32(grp_every_cycle_fu_995_ap_return_32),
    .ap_return_33(grp_every_cycle_fu_995_ap_return_33),
    .ap_return_34(grp_every_cycle_fu_995_ap_return_34),
    .ap_return_35(grp_every_cycle_fu_995_ap_return_35),
    .ap_return_36(grp_every_cycle_fu_995_ap_return_36),
    .ap_return_37(grp_every_cycle_fu_995_ap_return_37),
    .ap_return_38(grp_every_cycle_fu_995_ap_return_38),
    .ap_return_39(grp_every_cycle_fu_995_ap_return_39),
    .ap_return_40(grp_every_cycle_fu_995_ap_return_40),
    .ap_return_41(grp_every_cycle_fu_995_ap_return_41),
    .ap_return_42(grp_every_cycle_fu_995_ap_return_42),
    .ap_return_43(grp_every_cycle_fu_995_ap_return_43),
    .ap_return_44(grp_every_cycle_fu_995_ap_return_44),
    .ap_return_45(grp_every_cycle_fu_995_ap_return_45),
    .ap_return_46(grp_every_cycle_fu_995_ap_return_46),
    .ap_return_47(grp_every_cycle_fu_995_ap_return_47),
    .ap_return_48(grp_every_cycle_fu_995_ap_return_48),
    .ap_return_49(grp_every_cycle_fu_995_ap_return_49),
    .ap_return_50(grp_every_cycle_fu_995_ap_return_50),
    .ap_return_51(grp_every_cycle_fu_995_ap_return_51),
    .ap_return_52(grp_every_cycle_fu_995_ap_return_52),
    .ap_return_53(grp_every_cycle_fu_995_ap_return_53),
    .ap_return_54(grp_every_cycle_fu_995_ap_return_54),
    .ap_return_55(grp_every_cycle_fu_995_ap_return_55),
    .ap_return_56(grp_every_cycle_fu_995_ap_return_56),
    .ap_return_57(grp_every_cycle_fu_995_ap_return_57),
    .ap_return_58(grp_every_cycle_fu_995_ap_return_58),
    .ap_return_59(grp_every_cycle_fu_995_ap_return_59),
    .ap_return_60(grp_every_cycle_fu_995_ap_return_60),
    .ap_return_61(grp_every_cycle_fu_995_ap_return_61),
    .ap_return_62(grp_every_cycle_fu_995_ap_return_62),
    .ap_return_63(grp_every_cycle_fu_995_ap_return_63),
    .ap_return_64(grp_every_cycle_fu_995_ap_return_64),
    .front_end_to_adder_i_blk_n(grp_every_cycle_fu_995_front_end_to_adder_i_blk_n),
    .front_end_to_multiplier_i_blk_n(grp_every_cycle_fu_995_front_end_to_multiplier_i_blk_n)
);

cpu_mux_325_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_325_32_1_1_U542(
    .din0(rf_reg_value_0_0_reg_564),
    .din1(rf_reg_value_1_0_reg_552),
    .din2(rf_reg_value_2_0_reg_540),
    .din3(rf_reg_value_3_0_reg_528),
    .din4(rf_reg_value_4_0_reg_516),
    .din5(rf_reg_value_5_0_reg_504),
    .din6(rf_reg_value_6_0_reg_492),
    .din7(rf_reg_value_7_0_reg_480),
    .din8(rf_reg_value_8_0_reg_468),
    .din9(rf_reg_value_9_0_reg_456),
    .din10(rf_reg_value_10_0_reg_444),
    .din11(rf_reg_value_11_0_reg_432),
    .din12(rf_reg_value_12_0_reg_420),
    .din13(rf_reg_value_13_0_reg_408),
    .din14(rf_reg_value_14_0_reg_396),
    .din15(rf_reg_value_15_0_reg_384),
    .din16(rf_reg_value_16_0_reg_372),
    .din17(rf_reg_value_17_0_reg_360),
    .din18(rf_reg_value_18_0_reg_348),
    .din19(rf_reg_value_19_0_reg_336),
    .din20(rf_reg_value_20_0_reg_324),
    .din21(rf_reg_value_21_0_reg_312),
    .din22(rf_reg_value_22_0_reg_300),
    .din23(rf_reg_value_23_0_reg_288),
    .din24(rf_reg_value_24_0_reg_276),
    .din25(rf_reg_value_25_0_reg_264),
    .din26(rf_reg_value_26_0_reg_252),
    .din27(rf_reg_value_27_0_reg_240),
    .din28(rf_reg_value_28_0_reg_228),
    .din29(rf_reg_value_29_0_reg_216),
    .din30(rf_reg_value_30_0_reg_204),
    .din31(rf_reg_value_31_0_reg_192),
    .din32(tmp_fu_1539_p33),
    .dout(tmp_fu_1539_p34)
);

cpu_fifo_w160_d1_S front_end_to_adder_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_every_cycle_fu_995_front_end_to_adder_din),
    .if_full_n(front_end_to_adder_full_n),
    .if_write(front_end_to_adder_write),
    .if_dout(front_end_to_adder_dout),
    .if_empty_n(front_end_to_adder_empty_n),
    .if_read(front_end_to_adder_read)
);

cpu_fifo_w160_d1_S front_end_to_multiplier_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_every_cycle_fu_995_front_end_to_multiplier_din),
    .if_full_n(front_end_to_multiplier_full_n),
    .if_write(front_end_to_multiplier_write),
    .if_dout(front_end_to_multiplier_dout),
    .if_empty_n(front_end_to_multiplier_empty_n),
    .if_read(front_end_to_multiplier_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state30))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state30);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_every_cycle_fu_995_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state3) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_every_cycle_fu_995_ap_start_reg <= 1'b1;
        end else if ((grp_every_cycle_fu_995_ap_ready == 1'b1)) begin
            grp_every_cycle_fu_995_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        PC_reg_971 <= PC_1_fu_1516_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        PC_reg_971 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        cycle_reg_960 <= cycle_1_reg_1614;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cycle_reg_960 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_reg_983 <= 6'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln33_reg_1967 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_reg_983 <= add_ln33_reg_1962;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_0_0_reg_948 <= grp_every_cycle_fu_995_ap_return_1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_0_0_reg_948 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_10_0_reg_828 <= grp_every_cycle_fu_995_ap_return_11;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_10_0_reg_828 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_11_0_reg_816 <= grp_every_cycle_fu_995_ap_return_12;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_11_0_reg_816 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_12_0_reg_804 <= grp_every_cycle_fu_995_ap_return_13;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_12_0_reg_804 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_13_0_reg_792 <= grp_every_cycle_fu_995_ap_return_14;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_13_0_reg_792 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_14_0_reg_780 <= grp_every_cycle_fu_995_ap_return_15;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_14_0_reg_780 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_15_0_reg_768 <= grp_every_cycle_fu_995_ap_return_16;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_15_0_reg_768 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_16_0_reg_756 <= grp_every_cycle_fu_995_ap_return_17;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_16_0_reg_756 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_17_0_reg_744 <= grp_every_cycle_fu_995_ap_return_18;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_17_0_reg_744 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_18_0_reg_732 <= grp_every_cycle_fu_995_ap_return_19;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_18_0_reg_732 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_19_0_reg_720 <= grp_every_cycle_fu_995_ap_return_20;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_19_0_reg_720 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_1_0_reg_936 <= grp_every_cycle_fu_995_ap_return_2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_1_0_reg_936 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_20_0_reg_708 <= grp_every_cycle_fu_995_ap_return_21;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_20_0_reg_708 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_21_0_reg_696 <= grp_every_cycle_fu_995_ap_return_22;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_21_0_reg_696 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_22_0_reg_684 <= grp_every_cycle_fu_995_ap_return_23;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_22_0_reg_684 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_23_0_reg_672 <= grp_every_cycle_fu_995_ap_return_24;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_23_0_reg_672 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_24_0_reg_660 <= grp_every_cycle_fu_995_ap_return_25;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_24_0_reg_660 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_25_0_reg_648 <= grp_every_cycle_fu_995_ap_return_26;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_25_0_reg_648 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_26_0_reg_636 <= grp_every_cycle_fu_995_ap_return_27;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_26_0_reg_636 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_27_0_reg_624 <= grp_every_cycle_fu_995_ap_return_28;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_27_0_reg_624 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_28_0_reg_612 <= grp_every_cycle_fu_995_ap_return_29;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_28_0_reg_612 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_29_0_reg_600 <= grp_every_cycle_fu_995_ap_return_30;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_29_0_reg_600 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_2_0_reg_924 <= grp_every_cycle_fu_995_ap_return_3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_2_0_reg_924 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_30_0_reg_588 <= grp_every_cycle_fu_995_ap_return_31;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_30_0_reg_588 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_31_0_reg_576 <= grp_every_cycle_fu_995_ap_return_32;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_31_0_reg_576 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_3_0_reg_912 <= grp_every_cycle_fu_995_ap_return_4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_3_0_reg_912 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_4_0_reg_900 <= grp_every_cycle_fu_995_ap_return_5;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_4_0_reg_900 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_5_0_reg_888 <= grp_every_cycle_fu_995_ap_return_6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_5_0_reg_888 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_6_0_reg_876 <= grp_every_cycle_fu_995_ap_return_7;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_6_0_reg_876 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_7_0_reg_864 <= grp_every_cycle_fu_995_ap_return_8;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_7_0_reg_864 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_8_0_reg_852 <= grp_every_cycle_fu_995_ap_return_9;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_8_0_reg_852 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_stat_9_0_reg_840 <= grp_every_cycle_fu_995_ap_return_10;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_stat_9_0_reg_840 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_0_0_reg_564 <= grp_every_cycle_fu_995_ap_return_33;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_0_0_reg_564 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_10_0_reg_444 <= grp_every_cycle_fu_995_ap_return_43;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_10_0_reg_444 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_11_0_reg_432 <= grp_every_cycle_fu_995_ap_return_44;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_11_0_reg_432 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_12_0_reg_420 <= grp_every_cycle_fu_995_ap_return_45;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_12_0_reg_420 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_13_0_reg_408 <= grp_every_cycle_fu_995_ap_return_46;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_13_0_reg_408 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_14_0_reg_396 <= grp_every_cycle_fu_995_ap_return_47;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_14_0_reg_396 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_15_0_reg_384 <= grp_every_cycle_fu_995_ap_return_48;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_15_0_reg_384 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_16_0_reg_372 <= grp_every_cycle_fu_995_ap_return_49;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_16_0_reg_372 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_17_0_reg_360 <= grp_every_cycle_fu_995_ap_return_50;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_17_0_reg_360 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_18_0_reg_348 <= grp_every_cycle_fu_995_ap_return_51;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_18_0_reg_348 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_19_0_reg_336 <= grp_every_cycle_fu_995_ap_return_52;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_19_0_reg_336 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_1_0_reg_552 <= grp_every_cycle_fu_995_ap_return_34;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_1_0_reg_552 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_20_0_reg_324 <= grp_every_cycle_fu_995_ap_return_53;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_20_0_reg_324 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_21_0_reg_312 <= grp_every_cycle_fu_995_ap_return_54;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_21_0_reg_312 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_22_0_reg_300 <= grp_every_cycle_fu_995_ap_return_55;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_22_0_reg_300 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_23_0_reg_288 <= grp_every_cycle_fu_995_ap_return_56;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_23_0_reg_288 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_24_0_reg_276 <= grp_every_cycle_fu_995_ap_return_57;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_24_0_reg_276 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_25_0_reg_264 <= grp_every_cycle_fu_995_ap_return_58;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_25_0_reg_264 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_26_0_reg_252 <= grp_every_cycle_fu_995_ap_return_59;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_26_0_reg_252 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_27_0_reg_240 <= grp_every_cycle_fu_995_ap_return_60;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_27_0_reg_240 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_28_0_reg_228 <= grp_every_cycle_fu_995_ap_return_61;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_28_0_reg_228 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_29_0_reg_216 <= grp_every_cycle_fu_995_ap_return_62;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_29_0_reg_216 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_2_0_reg_540 <= grp_every_cycle_fu_995_ap_return_35;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_2_0_reg_540 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_30_0_reg_204 <= grp_every_cycle_fu_995_ap_return_63;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_30_0_reg_204 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_31_0_reg_192 <= grp_every_cycle_fu_995_ap_return_64;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_31_0_reg_192 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_3_0_reg_528 <= grp_every_cycle_fu_995_ap_return_36;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_3_0_reg_528 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_4_0_reg_516 <= grp_every_cycle_fu_995_ap_return_37;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_4_0_reg_516 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_5_0_reg_504 <= grp_every_cycle_fu_995_ap_return_38;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_5_0_reg_504 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_6_0_reg_492 <= grp_every_cycle_fu_995_ap_return_39;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_6_0_reg_492 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_7_0_reg_480 <= grp_every_cycle_fu_995_ap_return_40;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_7_0_reg_480 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_8_0_reg_468 <= grp_every_cycle_fu_995_ap_return_41;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_8_0_reg_468 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rf_reg_value_9_0_reg_456 <= grp_every_cycle_fu_995_ap_return_42;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rf_reg_value_9_0_reg_456 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln33_reg_1962 <= add_ln33_fu_1523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln47_fu_1239_p2))) begin
        add_ln60_reg_1627 <= add_ln60_fu_1250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cycle_1_reg_1614 <= cycle_1_fu_1213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln33_reg_1967 <= icmp_ln33_fu_1529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_1529_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_reg_1971 <= tmp_fu_1539_p34;
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_1529_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln33_reg_1967 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_phi_fu_987_p4 = add_ln33_reg_1962;
    end else begin
        ap_phi_mux_i_phi_fu_987_p4 = i_reg_983;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        final_register_file_o_ce0 = 1'b1;
    end else begin
        final_register_file_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln33_reg_1967 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        final_register_file_o_we0 = 1'b1;
    end else begin
        final_register_file_o_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        front_end_to_adder_read = grp_every_cycle_fu_995_front_end_to_adder_read;
    end else begin
        front_end_to_adder_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        front_end_to_adder_write = grp_every_cycle_fu_995_front_end_to_adder_write;
    end else begin
        front_end_to_adder_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        front_end_to_multiplier_read = grp_every_cycle_fu_995_front_end_to_multiplier_read;
    end else begin
        front_end_to_multiplier_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        front_end_to_multiplier_write = grp_every_cycle_fu_995_front_end_to_multiplier_write;
    end else begin
        front_end_to_multiplier_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_pp1_stage0) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_every_cycle_fu_995_ap_ce = 1'b0;
    end else begin
        grp_every_cycle_fu_995_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        instruction_memory_i_ce0 = 1'b1;
    end else begin
        instruction_memory_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln47_fu_1239_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln33_fu_1529_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln33_fu_1529_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PC_1_fu_1516_p3 = ((grp_every_cycle_fu_995_ap_return_0[0:0] == 1'b1) ? add_ln60_reg_1627 : PC_reg_971);

assign add_ln33_fu_1523_p2 = (ap_phi_mux_i_phi_fu_987_p4 + 6'd1);

assign add_ln60_fu_1250_p2 = (PC_reg_971 + 5'd1);

assign and_ln47_fu_1239_p2 = (xor_ln47_fu_1227_p2 & icmp_ln47_1_fu_1233_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_NS_fsm_state3 = ap_NS_fsm[32'd2];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cycle_1_fu_1213_p2 = (cycle_reg_960 + 32'd1);

assign final_register_file_o_address0 = i_cast_fu_1609_p1;

assign grp_every_cycle_fu_995_ap_start = grp_every_cycle_fu_995_ap_start_reg;

assign i_cast_fu_1609_p1 = i_reg_983;

assign icmp_ln33_fu_1529_p2 = ((ap_phi_mux_i_phi_fu_987_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln47_1_fu_1233_p2 = (($signed(cycle_reg_960) < $signed(32'd100)) ? 1'b1 : 1'b0);

assign instruction_memory_i_address0 = zext_ln53_fu_1245_p1;

assign tmp_3_fu_1219_p3 = PC_reg_971[32'd4];

assign tmp_fu_1539_p33 = ap_phi_mux_i_phi_fu_987_p4[4:0];

assign xor_ln47_fu_1227_p2 = (tmp_3_fu_1219_p3 ^ 1'd1);

assign zext_ln53_fu_1245_p1 = PC_reg_971;

endmodule //cpu
