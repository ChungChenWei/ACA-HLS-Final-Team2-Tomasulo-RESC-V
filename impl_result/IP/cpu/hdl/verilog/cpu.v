// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cpu_cpu,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.530000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=10181,HLS_SYN_LUT=24892,HLS_VERSION=2020_2}" *)

module cpu (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] instruction_memory_i_address0;
reg    instruction_memory_i_ce0;
wire   [31:0] instruction_memory_i_q0;
wire   [4:0] final_register_file_o_address0;
reg    final_register_file_o_ce0;
reg    final_register_file_o_we0;
reg   [31:0] rf_reg_stat_0_constprop;
reg   [31:0] rf_reg_stat_1_constprop;
reg   [31:0] rf_reg_stat_2_constprop;
reg   [31:0] rf_reg_stat_3_constprop;
reg   [31:0] rf_reg_stat_4_constprop;
reg   [31:0] rf_reg_stat_5_constprop;
reg   [31:0] rf_reg_stat_6_constprop;
reg   [31:0] rf_reg_stat_7_constprop;
reg   [31:0] rf_reg_stat_8_constprop;
reg   [31:0] rf_reg_stat_9_constprop;
reg   [31:0] rf_reg_stat_10_constprop;
reg   [31:0] rf_reg_stat_11_constprop;
reg   [31:0] rf_reg_stat_12_constprop;
reg   [31:0] rf_reg_stat_13_constprop;
reg   [31:0] rf_reg_stat_14_constprop;
reg   [31:0] rf_reg_stat_15_constprop;
reg   [31:0] rf_reg_stat_16_constprop;
reg   [31:0] rf_reg_stat_17_constprop;
reg   [31:0] rf_reg_stat_18_constprop;
reg   [31:0] rf_reg_stat_19_constprop;
reg   [31:0] rf_reg_stat_20_constprop;
reg   [31:0] rf_reg_stat_21_constprop;
reg   [31:0] rf_reg_stat_22_constprop;
reg   [31:0] rf_reg_stat_23_constprop;
reg   [31:0] rf_reg_stat_24_constprop;
reg   [31:0] rf_reg_stat_25_constprop;
reg   [31:0] rf_reg_stat_26_constprop;
reg   [31:0] rf_reg_stat_27_constprop;
reg   [31:0] rf_reg_stat_28_constprop;
reg   [31:0] rf_reg_stat_29_constprop;
reg   [31:0] rf_reg_stat_30_constprop;
reg   [31:0] rf_reg_stat_31_constprop;
wire   [31:0] cycle_1_fu_1120_p2;
reg   [31:0] cycle_1_reg_1395;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln48_fu_1146_p2;
reg   [31:0] instruction_memory_i_load_reg_1409;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [4:0] PC_1_fu_1295_p3;
wire   [5:0] add_ln33_fu_1303_p2;
wire    ap_CS_fsm_state5;
wire    grp_every_cycle_fu_694_ap_start;
wire    grp_every_cycle_fu_694_ap_done;
wire    grp_every_cycle_fu_694_ap_idle;
wire    grp_every_cycle_fu_694_ap_ready;
wire    grp_every_cycle_fu_694_adder_to_front_end_read;
wire   [63:0] grp_every_cycle_fu_694_adder_to_front_end_din;
wire    grp_every_cycle_fu_694_adder_to_front_end_write;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_0_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_0_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_1_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_1_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_2_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_2_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_3_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_3_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_4_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_4_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_5_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_5_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_6_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_6_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_7_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_7_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_8_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_8_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_9_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_9_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_10_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_10_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_11_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_11_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_12_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_12_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_13_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_13_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_14_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_14_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_15_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_15_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_16_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_16_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_17_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_17_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_18_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_18_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_19_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_19_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_20_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_20_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_21_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_21_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_22_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_22_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_23_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_23_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_24_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_24_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_25_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_25_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_26_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_26_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_27_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_27_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_28_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_28_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_29_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_29_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_30_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_30_constprop_o_ap_vld;
wire   [31:0] grp_every_cycle_fu_694_rf_reg_stat_31_constprop_o;
wire    grp_every_cycle_fu_694_rf_reg_stat_31_constprop_o_ap_vld;
wire    grp_every_cycle_fu_694_multiplier_to_frontend_read;
wire   [63:0] grp_every_cycle_fu_694_multiplier_to_frontend_din;
wire    grp_every_cycle_fu_694_multiplier_to_frontend_write;
wire    grp_every_cycle_fu_694_front_end_to_adder_read;
wire   [159:0] grp_every_cycle_fu_694_front_end_to_adder_din;
wire    grp_every_cycle_fu_694_front_end_to_adder_write;
wire    grp_every_cycle_fu_694_front_end_to_multiplier_read;
wire   [159:0] grp_every_cycle_fu_694_front_end_to_multiplier_din;
wire    grp_every_cycle_fu_694_front_end_to_multiplier_write;
wire   [0:0] grp_every_cycle_fu_694_ap_return_0;
wire   [31:0] grp_every_cycle_fu_694_ap_return_1;
wire   [31:0] grp_every_cycle_fu_694_ap_return_2;
wire   [31:0] grp_every_cycle_fu_694_ap_return_3;
wire   [31:0] grp_every_cycle_fu_694_ap_return_4;
wire   [31:0] grp_every_cycle_fu_694_ap_return_5;
wire   [31:0] grp_every_cycle_fu_694_ap_return_6;
wire   [31:0] grp_every_cycle_fu_694_ap_return_7;
wire   [31:0] grp_every_cycle_fu_694_ap_return_8;
wire   [31:0] grp_every_cycle_fu_694_ap_return_9;
wire   [31:0] grp_every_cycle_fu_694_ap_return_10;
wire   [31:0] grp_every_cycle_fu_694_ap_return_11;
wire   [31:0] grp_every_cycle_fu_694_ap_return_12;
wire   [31:0] grp_every_cycle_fu_694_ap_return_13;
wire   [31:0] grp_every_cycle_fu_694_ap_return_14;
wire   [31:0] grp_every_cycle_fu_694_ap_return_15;
wire   [31:0] grp_every_cycle_fu_694_ap_return_16;
wire   [31:0] grp_every_cycle_fu_694_ap_return_17;
wire   [31:0] grp_every_cycle_fu_694_ap_return_18;
wire   [31:0] grp_every_cycle_fu_694_ap_return_19;
wire   [31:0] grp_every_cycle_fu_694_ap_return_20;
wire   [31:0] grp_every_cycle_fu_694_ap_return_21;
wire   [31:0] grp_every_cycle_fu_694_ap_return_22;
wire   [31:0] grp_every_cycle_fu_694_ap_return_23;
wire   [31:0] grp_every_cycle_fu_694_ap_return_24;
wire   [31:0] grp_every_cycle_fu_694_ap_return_25;
wire   [31:0] grp_every_cycle_fu_694_ap_return_26;
wire   [31:0] grp_every_cycle_fu_694_ap_return_27;
wire   [31:0] grp_every_cycle_fu_694_ap_return_28;
wire   [31:0] grp_every_cycle_fu_694_ap_return_29;
wire   [31:0] grp_every_cycle_fu_694_ap_return_30;
wire   [31:0] grp_every_cycle_fu_694_ap_return_31;
wire   [31:0] grp_every_cycle_fu_694_ap_return_32;
reg   [31:0] rf_reg_value_31_0_reg_276;
reg   [31:0] rf_reg_value_30_0_reg_288;
reg   [31:0] rf_reg_value_29_0_reg_300;
reg   [31:0] rf_reg_value_28_0_reg_312;
reg   [31:0] rf_reg_value_27_0_reg_324;
reg   [31:0] rf_reg_value_26_0_reg_336;
reg   [31:0] rf_reg_value_25_0_reg_348;
reg   [31:0] rf_reg_value_24_0_reg_360;
reg   [31:0] rf_reg_value_23_0_reg_372;
reg   [31:0] rf_reg_value_22_0_reg_384;
reg   [31:0] rf_reg_value_21_0_reg_396;
reg   [31:0] rf_reg_value_20_0_reg_408;
reg   [31:0] rf_reg_value_19_0_reg_420;
reg   [31:0] rf_reg_value_18_0_reg_432;
reg   [31:0] rf_reg_value_17_0_reg_444;
reg   [31:0] rf_reg_value_16_0_reg_456;
reg   [31:0] rf_reg_value_15_0_reg_468;
reg   [31:0] rf_reg_value_14_0_reg_480;
reg   [31:0] rf_reg_value_13_0_reg_492;
reg   [31:0] rf_reg_value_12_0_reg_504;
reg   [31:0] rf_reg_value_11_0_reg_516;
reg   [31:0] rf_reg_value_10_0_reg_528;
reg   [31:0] rf_reg_value_9_0_reg_540;
reg   [31:0] rf_reg_value_8_0_reg_552;
reg   [31:0] rf_reg_value_7_0_reg_564;
reg   [31:0] rf_reg_value_6_0_reg_576;
reg   [31:0] rf_reg_value_5_0_reg_588;
reg   [31:0] rf_reg_value_4_0_reg_600;
reg   [31:0] rf_reg_value_3_0_reg_612;
reg   [31:0] rf_reg_value_2_0_reg_624;
reg   [31:0] rf_reg_value_1_0_reg_636;
reg   [31:0] rf_reg_value_0_0_reg_648;
reg   [31:0] cycle_reg_660;
reg   [4:0] PC_reg_671;
reg   [5:0] i_reg_683;
wire   [0:0] icmp_ln33_fu_1309_p2;
reg    grp_every_cycle_fu_694_ap_start_reg;
wire   [63:0] adder_to_front_end_dout;
wire    adder_to_front_end_empty_n;
reg    adder_to_front_end_read;
wire    adder_to_front_end_full_n;
reg    adder_to_front_end_write;
wire   [63:0] multiplier_to_frontend_dout;
wire    multiplier_to_frontend_empty_n;
reg    multiplier_to_frontend_read;
wire    multiplier_to_frontend_full_n;
reg    multiplier_to_frontend_write;
wire   [159:0] front_end_to_adder_dout;
wire    front_end_to_adder_empty_n;
reg    front_end_to_adder_read;
wire    front_end_to_adder_full_n;
reg    front_end_to_adder_write;
wire   [159:0] front_end_to_multiplier_dout;
wire    front_end_to_multiplier_empty_n;
reg    front_end_to_multiplier_read;
wire    front_end_to_multiplier_full_n;
reg    front_end_to_multiplier_write;
wire   [63:0] zext_ln56_fu_1152_p1;
wire   [63:0] i_cast_fu_1315_p1;
wire   [31:0] tmp_fu_1324_p34;
wire   [0:0] tmp_11_fu_1126_p3;
wire   [0:0] icmp_ln48_fu_1140_p2;
wire   [0:0] xor_ln48_fu_1134_p2;
wire   [4:0] add_ln63_fu_1289_p2;
wire   [4:0] tmp_fu_1324_p33;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 rf_reg_stat_0_constprop = 32'd1;
#0 rf_reg_stat_1_constprop = 32'd1;
#0 rf_reg_stat_2_constprop = 32'd1;
#0 rf_reg_stat_3_constprop = 32'd1;
#0 rf_reg_stat_4_constprop = 32'd1;
#0 rf_reg_stat_5_constprop = 32'd1;
#0 rf_reg_stat_6_constprop = 32'd1;
#0 rf_reg_stat_7_constprop = 32'd1;
#0 rf_reg_stat_8_constprop = 32'd1;
#0 rf_reg_stat_9_constprop = 32'd1;
#0 rf_reg_stat_10_constprop = 32'd1;
#0 rf_reg_stat_11_constprop = 32'd1;
#0 rf_reg_stat_12_constprop = 32'd1;
#0 rf_reg_stat_13_constprop = 32'd1;
#0 rf_reg_stat_14_constprop = 32'd1;
#0 rf_reg_stat_15_constprop = 32'd1;
#0 rf_reg_stat_16_constprop = 32'd1;
#0 rf_reg_stat_17_constprop = 32'd1;
#0 rf_reg_stat_18_constprop = 32'd1;
#0 rf_reg_stat_19_constprop = 32'd1;
#0 rf_reg_stat_20_constprop = 32'd1;
#0 rf_reg_stat_21_constprop = 32'd1;
#0 rf_reg_stat_22_constprop = 32'd1;
#0 rf_reg_stat_23_constprop = 32'd1;
#0 rf_reg_stat_24_constprop = 32'd1;
#0 rf_reg_stat_25_constprop = 32'd1;
#0 rf_reg_stat_26_constprop = 32'd1;
#0 rf_reg_stat_27_constprop = 32'd1;
#0 rf_reg_stat_28_constprop = 32'd1;
#0 rf_reg_stat_29_constprop = 32'd1;
#0 rf_reg_stat_30_constprop = 32'd1;
#0 rf_reg_stat_31_constprop = 32'd1;
#0 grp_every_cycle_fu_694_ap_start_reg = 1'b0;
end

cpu_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .instruction_memory_i_address0(instruction_memory_i_address0),
    .instruction_memory_i_ce0(instruction_memory_i_ce0),
    .instruction_memory_i_q0(instruction_memory_i_q0),
    .final_register_file_o_address0(final_register_file_o_address0),
    .final_register_file_o_ce0(final_register_file_o_ce0),
    .final_register_file_o_we0(final_register_file_o_we0),
    .final_register_file_o_d0(tmp_fu_1324_p34),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

cpu_every_cycle grp_every_cycle_fu_694(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_every_cycle_fu_694_ap_start),
    .ap_done(grp_every_cycle_fu_694_ap_done),
    .ap_idle(grp_every_cycle_fu_694_ap_idle),
    .ap_ready(grp_every_cycle_fu_694_ap_ready),
    .instruction_i(instruction_memory_i_load_reg_1409),
    .p_read(rf_reg_value_0_0_reg_648),
    .p_read1(rf_reg_value_1_0_reg_636),
    .p_read2(rf_reg_value_2_0_reg_624),
    .p_read3(rf_reg_value_3_0_reg_612),
    .p_read4(rf_reg_value_4_0_reg_600),
    .p_read5(rf_reg_value_5_0_reg_588),
    .p_read6(rf_reg_value_6_0_reg_576),
    .p_read7(rf_reg_value_7_0_reg_564),
    .p_read8(rf_reg_value_8_0_reg_552),
    .p_read9(rf_reg_value_9_0_reg_540),
    .p_read10(rf_reg_value_10_0_reg_528),
    .p_read11(rf_reg_value_11_0_reg_516),
    .p_read12(rf_reg_value_12_0_reg_504),
    .p_read13(rf_reg_value_13_0_reg_492),
    .p_read14(rf_reg_value_14_0_reg_480),
    .p_read15(rf_reg_value_15_0_reg_468),
    .p_read16(rf_reg_value_16_0_reg_456),
    .p_read17(rf_reg_value_17_0_reg_444),
    .p_read18(rf_reg_value_18_0_reg_432),
    .p_read19(rf_reg_value_19_0_reg_420),
    .p_read20(rf_reg_value_20_0_reg_408),
    .p_read21(rf_reg_value_21_0_reg_396),
    .p_read22(rf_reg_value_22_0_reg_384),
    .p_read23(rf_reg_value_23_0_reg_372),
    .p_read24(rf_reg_value_24_0_reg_360),
    .p_read25(rf_reg_value_25_0_reg_348),
    .p_read26(rf_reg_value_26_0_reg_336),
    .p_read27(rf_reg_value_27_0_reg_324),
    .p_read28(rf_reg_value_28_0_reg_312),
    .p_read29(rf_reg_value_29_0_reg_300),
    .p_read30(rf_reg_value_30_0_reg_288),
    .p_read31(rf_reg_value_31_0_reg_276),
    .adder_to_front_end_dout(adder_to_front_end_dout),
    .adder_to_front_end_empty_n(adder_to_front_end_empty_n),
    .adder_to_front_end_read(grp_every_cycle_fu_694_adder_to_front_end_read),
    .adder_to_front_end_din(grp_every_cycle_fu_694_adder_to_front_end_din),
    .adder_to_front_end_full_n(adder_to_front_end_full_n),
    .adder_to_front_end_write(grp_every_cycle_fu_694_adder_to_front_end_write),
    .rf_reg_stat_0_constprop_i(rf_reg_stat_0_constprop),
    .rf_reg_stat_0_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_0_constprop_o),
    .rf_reg_stat_0_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_0_constprop_o_ap_vld),
    .rf_reg_stat_1_constprop_i(rf_reg_stat_1_constprop),
    .rf_reg_stat_1_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_1_constprop_o),
    .rf_reg_stat_1_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_1_constprop_o_ap_vld),
    .rf_reg_stat_2_constprop_i(rf_reg_stat_2_constprop),
    .rf_reg_stat_2_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_2_constprop_o),
    .rf_reg_stat_2_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_2_constprop_o_ap_vld),
    .rf_reg_stat_3_constprop_i(rf_reg_stat_3_constprop),
    .rf_reg_stat_3_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_3_constprop_o),
    .rf_reg_stat_3_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_3_constprop_o_ap_vld),
    .rf_reg_stat_4_constprop_i(rf_reg_stat_4_constprop),
    .rf_reg_stat_4_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_4_constprop_o),
    .rf_reg_stat_4_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_4_constprop_o_ap_vld),
    .rf_reg_stat_5_constprop_i(rf_reg_stat_5_constprop),
    .rf_reg_stat_5_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_5_constprop_o),
    .rf_reg_stat_5_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_5_constprop_o_ap_vld),
    .rf_reg_stat_6_constprop_i(rf_reg_stat_6_constprop),
    .rf_reg_stat_6_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_6_constprop_o),
    .rf_reg_stat_6_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_6_constprop_o_ap_vld),
    .rf_reg_stat_7_constprop_i(rf_reg_stat_7_constprop),
    .rf_reg_stat_7_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_7_constprop_o),
    .rf_reg_stat_7_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_7_constprop_o_ap_vld),
    .rf_reg_stat_8_constprop_i(rf_reg_stat_8_constprop),
    .rf_reg_stat_8_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_8_constprop_o),
    .rf_reg_stat_8_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_8_constprop_o_ap_vld),
    .rf_reg_stat_9_constprop_i(rf_reg_stat_9_constprop),
    .rf_reg_stat_9_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_9_constprop_o),
    .rf_reg_stat_9_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_9_constprop_o_ap_vld),
    .rf_reg_stat_10_constprop_i(rf_reg_stat_10_constprop),
    .rf_reg_stat_10_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_10_constprop_o),
    .rf_reg_stat_10_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_10_constprop_o_ap_vld),
    .rf_reg_stat_11_constprop_i(rf_reg_stat_11_constprop),
    .rf_reg_stat_11_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_11_constprop_o),
    .rf_reg_stat_11_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_11_constprop_o_ap_vld),
    .rf_reg_stat_12_constprop_i(rf_reg_stat_12_constprop),
    .rf_reg_stat_12_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_12_constprop_o),
    .rf_reg_stat_12_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_12_constprop_o_ap_vld),
    .rf_reg_stat_13_constprop_i(rf_reg_stat_13_constprop),
    .rf_reg_stat_13_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_13_constprop_o),
    .rf_reg_stat_13_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_13_constprop_o_ap_vld),
    .rf_reg_stat_14_constprop_i(rf_reg_stat_14_constprop),
    .rf_reg_stat_14_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_14_constprop_o),
    .rf_reg_stat_14_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_14_constprop_o_ap_vld),
    .rf_reg_stat_15_constprop_i(rf_reg_stat_15_constprop),
    .rf_reg_stat_15_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_15_constprop_o),
    .rf_reg_stat_15_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_15_constprop_o_ap_vld),
    .rf_reg_stat_16_constprop_i(rf_reg_stat_16_constprop),
    .rf_reg_stat_16_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_16_constprop_o),
    .rf_reg_stat_16_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_16_constprop_o_ap_vld),
    .rf_reg_stat_17_constprop_i(rf_reg_stat_17_constprop),
    .rf_reg_stat_17_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_17_constprop_o),
    .rf_reg_stat_17_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_17_constprop_o_ap_vld),
    .rf_reg_stat_18_constprop_i(rf_reg_stat_18_constprop),
    .rf_reg_stat_18_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_18_constprop_o),
    .rf_reg_stat_18_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_18_constprop_o_ap_vld),
    .rf_reg_stat_19_constprop_i(rf_reg_stat_19_constprop),
    .rf_reg_stat_19_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_19_constprop_o),
    .rf_reg_stat_19_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_19_constprop_o_ap_vld),
    .rf_reg_stat_20_constprop_i(rf_reg_stat_20_constprop),
    .rf_reg_stat_20_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_20_constprop_o),
    .rf_reg_stat_20_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_20_constprop_o_ap_vld),
    .rf_reg_stat_21_constprop_i(rf_reg_stat_21_constprop),
    .rf_reg_stat_21_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_21_constprop_o),
    .rf_reg_stat_21_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_21_constprop_o_ap_vld),
    .rf_reg_stat_22_constprop_i(rf_reg_stat_22_constprop),
    .rf_reg_stat_22_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_22_constprop_o),
    .rf_reg_stat_22_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_22_constprop_o_ap_vld),
    .rf_reg_stat_23_constprop_i(rf_reg_stat_23_constprop),
    .rf_reg_stat_23_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_23_constprop_o),
    .rf_reg_stat_23_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_23_constprop_o_ap_vld),
    .rf_reg_stat_24_constprop_i(rf_reg_stat_24_constprop),
    .rf_reg_stat_24_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_24_constprop_o),
    .rf_reg_stat_24_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_24_constprop_o_ap_vld),
    .rf_reg_stat_25_constprop_i(rf_reg_stat_25_constprop),
    .rf_reg_stat_25_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_25_constprop_o),
    .rf_reg_stat_25_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_25_constprop_o_ap_vld),
    .rf_reg_stat_26_constprop_i(rf_reg_stat_26_constprop),
    .rf_reg_stat_26_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_26_constprop_o),
    .rf_reg_stat_26_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_26_constprop_o_ap_vld),
    .rf_reg_stat_27_constprop_i(rf_reg_stat_27_constprop),
    .rf_reg_stat_27_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_27_constprop_o),
    .rf_reg_stat_27_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_27_constprop_o_ap_vld),
    .rf_reg_stat_28_constprop_i(rf_reg_stat_28_constprop),
    .rf_reg_stat_28_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_28_constprop_o),
    .rf_reg_stat_28_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_28_constprop_o_ap_vld),
    .rf_reg_stat_29_constprop_i(rf_reg_stat_29_constprop),
    .rf_reg_stat_29_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_29_constprop_o),
    .rf_reg_stat_29_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_29_constprop_o_ap_vld),
    .rf_reg_stat_30_constprop_i(rf_reg_stat_30_constprop),
    .rf_reg_stat_30_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_30_constprop_o),
    .rf_reg_stat_30_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_30_constprop_o_ap_vld),
    .rf_reg_stat_31_constprop_i(rf_reg_stat_31_constprop),
    .rf_reg_stat_31_constprop_o(grp_every_cycle_fu_694_rf_reg_stat_31_constprop_o),
    .rf_reg_stat_31_constprop_o_ap_vld(grp_every_cycle_fu_694_rf_reg_stat_31_constprop_o_ap_vld),
    .multiplier_to_frontend_dout(multiplier_to_frontend_dout),
    .multiplier_to_frontend_empty_n(multiplier_to_frontend_empty_n),
    .multiplier_to_frontend_read(grp_every_cycle_fu_694_multiplier_to_frontend_read),
    .multiplier_to_frontend_din(grp_every_cycle_fu_694_multiplier_to_frontend_din),
    .multiplier_to_frontend_full_n(multiplier_to_frontend_full_n),
    .multiplier_to_frontend_write(grp_every_cycle_fu_694_multiplier_to_frontend_write),
    .front_end_to_adder_dout(front_end_to_adder_dout),
    .front_end_to_adder_empty_n(front_end_to_adder_empty_n),
    .front_end_to_adder_read(grp_every_cycle_fu_694_front_end_to_adder_read),
    .front_end_to_adder_din(grp_every_cycle_fu_694_front_end_to_adder_din),
    .front_end_to_adder_full_n(front_end_to_adder_full_n),
    .front_end_to_adder_write(grp_every_cycle_fu_694_front_end_to_adder_write),
    .front_end_to_multiplier_dout(front_end_to_multiplier_dout),
    .front_end_to_multiplier_empty_n(front_end_to_multiplier_empty_n),
    .front_end_to_multiplier_read(grp_every_cycle_fu_694_front_end_to_multiplier_read),
    .front_end_to_multiplier_din(grp_every_cycle_fu_694_front_end_to_multiplier_din),
    .front_end_to_multiplier_full_n(front_end_to_multiplier_full_n),
    .front_end_to_multiplier_write(grp_every_cycle_fu_694_front_end_to_multiplier_write),
    .ap_return_0(grp_every_cycle_fu_694_ap_return_0),
    .ap_return_1(grp_every_cycle_fu_694_ap_return_1),
    .ap_return_2(grp_every_cycle_fu_694_ap_return_2),
    .ap_return_3(grp_every_cycle_fu_694_ap_return_3),
    .ap_return_4(grp_every_cycle_fu_694_ap_return_4),
    .ap_return_5(grp_every_cycle_fu_694_ap_return_5),
    .ap_return_6(grp_every_cycle_fu_694_ap_return_6),
    .ap_return_7(grp_every_cycle_fu_694_ap_return_7),
    .ap_return_8(grp_every_cycle_fu_694_ap_return_8),
    .ap_return_9(grp_every_cycle_fu_694_ap_return_9),
    .ap_return_10(grp_every_cycle_fu_694_ap_return_10),
    .ap_return_11(grp_every_cycle_fu_694_ap_return_11),
    .ap_return_12(grp_every_cycle_fu_694_ap_return_12),
    .ap_return_13(grp_every_cycle_fu_694_ap_return_13),
    .ap_return_14(grp_every_cycle_fu_694_ap_return_14),
    .ap_return_15(grp_every_cycle_fu_694_ap_return_15),
    .ap_return_16(grp_every_cycle_fu_694_ap_return_16),
    .ap_return_17(grp_every_cycle_fu_694_ap_return_17),
    .ap_return_18(grp_every_cycle_fu_694_ap_return_18),
    .ap_return_19(grp_every_cycle_fu_694_ap_return_19),
    .ap_return_20(grp_every_cycle_fu_694_ap_return_20),
    .ap_return_21(grp_every_cycle_fu_694_ap_return_21),
    .ap_return_22(grp_every_cycle_fu_694_ap_return_22),
    .ap_return_23(grp_every_cycle_fu_694_ap_return_23),
    .ap_return_24(grp_every_cycle_fu_694_ap_return_24),
    .ap_return_25(grp_every_cycle_fu_694_ap_return_25),
    .ap_return_26(grp_every_cycle_fu_694_ap_return_26),
    .ap_return_27(grp_every_cycle_fu_694_ap_return_27),
    .ap_return_28(grp_every_cycle_fu_694_ap_return_28),
    .ap_return_29(grp_every_cycle_fu_694_ap_return_29),
    .ap_return_30(grp_every_cycle_fu_694_ap_return_30),
    .ap_return_31(grp_every_cycle_fu_694_ap_return_31),
    .ap_return_32(grp_every_cycle_fu_694_ap_return_32)
);

cpu_mux_325_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_325_32_1_1_U435(
    .din0(rf_reg_value_0_0_reg_648),
    .din1(rf_reg_value_1_0_reg_636),
    .din2(rf_reg_value_2_0_reg_624),
    .din3(rf_reg_value_3_0_reg_612),
    .din4(rf_reg_value_4_0_reg_600),
    .din5(rf_reg_value_5_0_reg_588),
    .din6(rf_reg_value_6_0_reg_576),
    .din7(rf_reg_value_7_0_reg_564),
    .din8(rf_reg_value_8_0_reg_552),
    .din9(rf_reg_value_9_0_reg_540),
    .din10(rf_reg_value_10_0_reg_528),
    .din11(rf_reg_value_11_0_reg_516),
    .din12(rf_reg_value_12_0_reg_504),
    .din13(rf_reg_value_13_0_reg_492),
    .din14(rf_reg_value_14_0_reg_480),
    .din15(rf_reg_value_15_0_reg_468),
    .din16(rf_reg_value_16_0_reg_456),
    .din17(rf_reg_value_17_0_reg_444),
    .din18(rf_reg_value_18_0_reg_432),
    .din19(rf_reg_value_19_0_reg_420),
    .din20(rf_reg_value_20_0_reg_408),
    .din21(rf_reg_value_21_0_reg_396),
    .din22(rf_reg_value_22_0_reg_384),
    .din23(rf_reg_value_23_0_reg_372),
    .din24(rf_reg_value_24_0_reg_360),
    .din25(rf_reg_value_25_0_reg_348),
    .din26(rf_reg_value_26_0_reg_336),
    .din27(rf_reg_value_27_0_reg_324),
    .din28(rf_reg_value_28_0_reg_312),
    .din29(rf_reg_value_29_0_reg_300),
    .din30(rf_reg_value_30_0_reg_288),
    .din31(rf_reg_value_31_0_reg_276),
    .din32(tmp_fu_1324_p33),
    .dout(tmp_fu_1324_p34)
);

cpu_fifo_w64_d1_S adder_to_front_end_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_every_cycle_fu_694_adder_to_front_end_din),
    .if_full_n(adder_to_front_end_full_n),
    .if_write(adder_to_front_end_write),
    .if_dout(adder_to_front_end_dout),
    .if_empty_n(adder_to_front_end_empty_n),
    .if_read(adder_to_front_end_read)
);

cpu_fifo_w160_d1_S front_end_to_adder_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_every_cycle_fu_694_front_end_to_adder_din),
    .if_full_n(front_end_to_adder_full_n),
    .if_write(front_end_to_adder_write),
    .if_dout(front_end_to_adder_dout),
    .if_empty_n(front_end_to_adder_empty_n),
    .if_read(front_end_to_adder_read)
);

cpu_fifo_w160_d1_S front_end_to_multiplier_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_every_cycle_fu_694_front_end_to_multiplier_din),
    .if_full_n(front_end_to_multiplier_full_n),
    .if_write(front_end_to_multiplier_write),
    .if_dout(front_end_to_multiplier_dout),
    .if_empty_n(front_end_to_multiplier_empty_n),
    .if_read(front_end_to_multiplier_read)
);

cpu_fifo_w64_d1_S multiplier_to_frontend_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_every_cycle_fu_694_multiplier_to_frontend_din),
    .if_full_n(multiplier_to_frontend_full_n),
    .if_write(multiplier_to_frontend_write),
    .if_dout(multiplier_to_frontend_dout),
    .if_empty_n(multiplier_to_frontend_empty_n),
    .if_read(multiplier_to_frontend_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_every_cycle_fu_694_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_every_cycle_fu_694_ap_start_reg <= 1'b1;
        end else if ((grp_every_cycle_fu_694_ap_ready == 1'b1)) begin
            grp_every_cycle_fu_694_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        PC_reg_671 <= PC_1_fu_1295_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        PC_reg_671 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        cycle_reg_660 <= cycle_1_reg_1395;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cycle_reg_660 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln48_fu_1146_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_683 <= 6'd0;
    end else if (((icmp_ln33_fu_1309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_683 <= add_ln33_fu_1303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_0_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_0_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_0_constprop <= grp_every_cycle_fu_694_rf_reg_stat_0_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_10_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_10_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_10_constprop <= grp_every_cycle_fu_694_rf_reg_stat_10_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_11_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_11_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_11_constprop <= grp_every_cycle_fu_694_rf_reg_stat_11_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_12_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_12_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_12_constprop <= grp_every_cycle_fu_694_rf_reg_stat_12_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_13_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_13_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_13_constprop <= grp_every_cycle_fu_694_rf_reg_stat_13_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_14_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_14_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_14_constprop <= grp_every_cycle_fu_694_rf_reg_stat_14_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_15_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_15_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_15_constprop <= grp_every_cycle_fu_694_rf_reg_stat_15_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_16_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_16_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_16_constprop <= grp_every_cycle_fu_694_rf_reg_stat_16_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_17_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_17_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_17_constprop <= grp_every_cycle_fu_694_rf_reg_stat_17_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_18_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_18_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_18_constprop <= grp_every_cycle_fu_694_rf_reg_stat_18_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_19_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_19_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_19_constprop <= grp_every_cycle_fu_694_rf_reg_stat_19_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_1_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_1_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_1_constprop <= grp_every_cycle_fu_694_rf_reg_stat_1_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_20_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_20_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_20_constprop <= grp_every_cycle_fu_694_rf_reg_stat_20_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_21_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_21_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_21_constprop <= grp_every_cycle_fu_694_rf_reg_stat_21_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_22_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_22_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_22_constprop <= grp_every_cycle_fu_694_rf_reg_stat_22_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_23_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_23_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_23_constprop <= grp_every_cycle_fu_694_rf_reg_stat_23_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_24_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_24_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_24_constprop <= grp_every_cycle_fu_694_rf_reg_stat_24_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_25_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_25_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_25_constprop <= grp_every_cycle_fu_694_rf_reg_stat_25_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_26_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_26_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_26_constprop <= grp_every_cycle_fu_694_rf_reg_stat_26_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_27_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_27_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_27_constprop <= grp_every_cycle_fu_694_rf_reg_stat_27_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_28_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_28_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_28_constprop <= grp_every_cycle_fu_694_rf_reg_stat_28_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_29_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_29_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_29_constprop <= grp_every_cycle_fu_694_rf_reg_stat_29_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_2_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_2_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_2_constprop <= grp_every_cycle_fu_694_rf_reg_stat_2_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_30_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_30_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_30_constprop <= grp_every_cycle_fu_694_rf_reg_stat_30_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_31_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_31_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_31_constprop <= grp_every_cycle_fu_694_rf_reg_stat_31_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_3_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_3_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_3_constprop <= grp_every_cycle_fu_694_rf_reg_stat_3_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_4_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_4_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_4_constprop <= grp_every_cycle_fu_694_rf_reg_stat_4_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_5_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_5_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_5_constprop <= grp_every_cycle_fu_694_rf_reg_stat_5_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_6_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_6_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_6_constprop <= grp_every_cycle_fu_694_rf_reg_stat_6_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_7_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_7_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_7_constprop <= grp_every_cycle_fu_694_rf_reg_stat_7_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_8_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_8_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_8_constprop <= grp_every_cycle_fu_694_rf_reg_stat_8_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_stat_9_constprop <= 32'd1;
    end else if (((grp_every_cycle_fu_694_rf_reg_stat_9_constprop_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_stat_9_constprop <= grp_every_cycle_fu_694_rf_reg_stat_9_constprop_o;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_0_0_reg_648 <= grp_every_cycle_fu_694_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_0_0_reg_648 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_10_0_reg_528 <= grp_every_cycle_fu_694_ap_return_11;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_10_0_reg_528 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_11_0_reg_516 <= grp_every_cycle_fu_694_ap_return_12;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_11_0_reg_516 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_12_0_reg_504 <= grp_every_cycle_fu_694_ap_return_13;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_12_0_reg_504 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_13_0_reg_492 <= grp_every_cycle_fu_694_ap_return_14;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_13_0_reg_492 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_14_0_reg_480 <= grp_every_cycle_fu_694_ap_return_15;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_14_0_reg_480 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_15_0_reg_468 <= grp_every_cycle_fu_694_ap_return_16;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_15_0_reg_468 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_16_0_reg_456 <= grp_every_cycle_fu_694_ap_return_17;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_16_0_reg_456 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_17_0_reg_444 <= grp_every_cycle_fu_694_ap_return_18;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_17_0_reg_444 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_18_0_reg_432 <= grp_every_cycle_fu_694_ap_return_19;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_18_0_reg_432 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_19_0_reg_420 <= grp_every_cycle_fu_694_ap_return_20;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_19_0_reg_420 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_1_0_reg_636 <= grp_every_cycle_fu_694_ap_return_2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_1_0_reg_636 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_20_0_reg_408 <= grp_every_cycle_fu_694_ap_return_21;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_20_0_reg_408 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_21_0_reg_396 <= grp_every_cycle_fu_694_ap_return_22;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_21_0_reg_396 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_22_0_reg_384 <= grp_every_cycle_fu_694_ap_return_23;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_22_0_reg_384 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_23_0_reg_372 <= grp_every_cycle_fu_694_ap_return_24;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_23_0_reg_372 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_24_0_reg_360 <= grp_every_cycle_fu_694_ap_return_25;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_24_0_reg_360 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_25_0_reg_348 <= grp_every_cycle_fu_694_ap_return_26;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_25_0_reg_348 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_26_0_reg_336 <= grp_every_cycle_fu_694_ap_return_27;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_26_0_reg_336 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_27_0_reg_324 <= grp_every_cycle_fu_694_ap_return_28;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_27_0_reg_324 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_28_0_reg_312 <= grp_every_cycle_fu_694_ap_return_29;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_28_0_reg_312 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_29_0_reg_300 <= grp_every_cycle_fu_694_ap_return_30;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_29_0_reg_300 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_2_0_reg_624 <= grp_every_cycle_fu_694_ap_return_3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_2_0_reg_624 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_30_0_reg_288 <= grp_every_cycle_fu_694_ap_return_31;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_30_0_reg_288 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_31_0_reg_276 <= grp_every_cycle_fu_694_ap_return_32;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_31_0_reg_276 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_3_0_reg_612 <= grp_every_cycle_fu_694_ap_return_4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_3_0_reg_612 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_4_0_reg_600 <= grp_every_cycle_fu_694_ap_return_5;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_4_0_reg_600 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_5_0_reg_588 <= grp_every_cycle_fu_694_ap_return_6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_5_0_reg_588 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_6_0_reg_576 <= grp_every_cycle_fu_694_ap_return_7;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_6_0_reg_576 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_7_0_reg_564 <= grp_every_cycle_fu_694_ap_return_8;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_7_0_reg_564 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_8_0_reg_552 <= grp_every_cycle_fu_694_ap_return_9;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_8_0_reg_552 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        rf_reg_value_9_0_reg_540 <= grp_every_cycle_fu_694_ap_return_10;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rf_reg_value_9_0_reg_540 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cycle_1_reg_1395 <= cycle_1_fu_1120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        instruction_memory_i_load_reg_1409 <= instruction_memory_i_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        adder_to_front_end_read = grp_every_cycle_fu_694_adder_to_front_end_read;
    end else begin
        adder_to_front_end_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        adder_to_front_end_write = grp_every_cycle_fu_694_adder_to_front_end_write;
    end else begin
        adder_to_front_end_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        final_register_file_o_ce0 = 1'b1;
    end else begin
        final_register_file_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_1309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        final_register_file_o_we0 = 1'b1;
    end else begin
        final_register_file_o_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        front_end_to_adder_read = grp_every_cycle_fu_694_front_end_to_adder_read;
    end else begin
        front_end_to_adder_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        front_end_to_adder_write = grp_every_cycle_fu_694_front_end_to_adder_write;
    end else begin
        front_end_to_adder_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        front_end_to_multiplier_read = grp_every_cycle_fu_694_front_end_to_multiplier_read;
    end else begin
        front_end_to_multiplier_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        front_end_to_multiplier_write = grp_every_cycle_fu_694_front_end_to_multiplier_write;
    end else begin
        front_end_to_multiplier_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        instruction_memory_i_ce0 = 1'b1;
    end else begin
        instruction_memory_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        multiplier_to_frontend_read = grp_every_cycle_fu_694_multiplier_to_frontend_read;
    end else begin
        multiplier_to_frontend_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        multiplier_to_frontend_write = grp_every_cycle_fu_694_multiplier_to_frontend_write;
    end else begin
        multiplier_to_frontend_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd0 == and_ln48_fu_1146_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_every_cycle_fu_694_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln33_fu_1309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PC_1_fu_1295_p3 = ((grp_every_cycle_fu_694_ap_return_0[0:0] == 1'b1) ? add_ln63_fu_1289_p2 : PC_reg_671);

assign add_ln33_fu_1303_p2 = (i_reg_683 + 6'd1);

assign add_ln63_fu_1289_p2 = (PC_reg_671 + 5'd1);

assign and_ln48_fu_1146_p2 = (xor_ln48_fu_1134_p2 & icmp_ln48_fu_1140_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cycle_1_fu_1120_p2 = (cycle_reg_660 + 32'd1);

assign final_register_file_o_address0 = i_cast_fu_1315_p1;

assign grp_every_cycle_fu_694_ap_start = grp_every_cycle_fu_694_ap_start_reg;

assign i_cast_fu_1315_p1 = i_reg_683;

assign icmp_ln33_fu_1309_p2 = ((i_reg_683 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1140_p2 = (($signed(cycle_reg_660) < $signed(32'd40)) ? 1'b1 : 1'b0);

assign instruction_memory_i_address0 = zext_ln56_fu_1152_p1;

assign tmp_11_fu_1126_p3 = PC_reg_671[32'd4];

assign tmp_fu_1324_p33 = i_reg_683[4:0];

assign xor_ln48_fu_1134_p2 = (tmp_11_fu_1126_p3 ^ 1'd1);

assign zext_ln56_fu_1152_p1 = PC_reg_671;

endmodule //cpu
